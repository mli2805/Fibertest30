syntax = "proto3";

// https://protobuf.dev/programming-guides/style/

// TODO: Consider merging it with LibOtdr's schema.proto

// NOTE: Notes about error handling.
//       gRPC supports sending call status code and call status details along with call response
//       data and call metadata. Those status codes are described at https://grpc.github.io/grpc/core/md_doc_statuscodes.html
//       Sending custom status codes is not supported, at least on some implementations. E.g.,
//       trying to return any custom status code from from C++ server, will always result in
//       StatusCode.UNKNOWN on python client side. This leaves us with the following choices:
//       1. Use only standard gRPC error codes and add all additional error information into
//       `details` string.
//       2. Use only standard gRPC error codes, optionally with `details` string, and add all
//       additional error information into call metadata.
//       2.1. Use the richer error model from Google API (com.google.rpc.* classes), which
//       defines additional classes to transfer different kinds of error information through
//       call metadata.
//       3. Don't use gRPC error mode at all and return call status with optional error
//       information within the response class. (Similarly like HTTP API will always return
//       200 OK and add error info within the response JSON data).
//       So let's start with 1. since it's easier and in gRPC way, and then see.

package Optixsoft.GrpcOtdr;

service OtdrService {
  rpc Test (TestRequest) returns (TestResponse);

  rpc GetInfo (GetInfoRequest) returns (GetInfoResponse);

  rpc ConnectOtdr(ConnectOtdrRequest) returns (ConnectOtdrResponse);
  rpc DisconnectOtdr(DisconnectOtdrRequest) returns (DisconnectOtdrResponse);

  rpc PresetSorFields(PresetSorFieldsRequest) returns (PresetSorFieldsResponse);

  rpc SetLaser(SetLaserRequest) returns (SetLaserResponse);
  rpc SetOpticalLineProperties(SetOpticalLinePropertiesRequest)
    returns (SetOpticalLinePropertiesResponse);

  rpc AnalyseOpticalLine(AnalyseOpticalLineRequest) returns (AnalyseOpticalLineResponse);
  rpc ForceOpticalLineLmax(ForceOpticalLineLmaxRequest) returns (ForceOpticalLineLmaxResponse);

  rpc PrepareVscout(PrepareVscoutRequest) returns (PrepareVscoutResponse);
  rpc ApplyVscoutTraceAcquisitionParameters(ApplyVscoutTraceAcquisitionParametersRequest)
    returns (ApplyVscoutTraceAcquisitionParametersResponse);

  rpc SetRefractiveIndex(SetRefractiveIndexRequest) returns (SetRefractiveIndexResponse);
  rpc SetBackscatterCoefficient(SetBackscatterCoefficientRequest)
    returns (SetBackscatterCoefficientResponse);
  rpc SetDistanceRange(SetDistanceRangeRequest) returns (SetDistanceRangeResponse);
  rpc SetResolution(SetResolutionRequest) returns (SetResolutionResponse);
  rpc SetPulseDuration(SetPulseDurationRequest) returns (SetPulseDurationResponse);
  rpc SetAveraging(SetAveragingRequest) returns (SetAveragingResponse);
  rpc SetLiveRefreshTime(SetLiveRefreshTimeRequest) returns (SetLiveRefreshTimeResponse);
  rpc SetHighResolutionOptimization(SetHighResolutionOptimizationRequest)
    returns (SetHighResolutionOptimizationResponse);

  rpc SetParametersFromSor(SetParametersFromSorRequest)
    returns (SetParametersFromSorResponse);

  rpc StartTraceAcquisition(StartTraceAcquisitionRequest)
    returns (StartTraceAcquisitionResponse);
  rpc NextTraceAcquisitionStep(NextTraceAcquisitionStepRequest)
    returns (NextTraceAcquisitionStepResponse);
  rpc AbortTraceAcquisition(AbortTraceAcquisitionRequest)
    returns (AbortTraceAcquisitionResponse);

  rpc AnalyseTrace(AnalyseTraceRequest) returns (AnalyseTraceResponse);

  rpc CompareTraces(CompareTracesRequest) returns (CompareTracesResponse);

  rpc GenerateLinkmap(GenerateLinkmapRequest) returns (GenerateLinkmapResponse);
}

// Common messages
message AnalysisParameters {
  optional double reflectance_threshold = 1;
  optional double loss_threshold = 2;
  optional double attenuation_threshold = 3;
  optional double end_of_fiber_threshold = 4;
}

// Test

message TestRequest {
  message Response {
    optional string message = 1;
    optional float delay = 2;
  }
  message Error {
    optional uint32 code = 1;
    optional string message = 2;
  }
  message Exception {
    enum ExceptionType {
      EXCEPTION_TYPE_UNSPECIFIED = 0;
      EXCEPTION_TYPE_RUNTIME_ERROR = 1;
      EXCEPTION_TYPE_INVALID_ARGUMENT = 2;
      EXCEPTION_TYPE_INVALID_STATE = 3;
      EXCEPTION_TYPE_NOT_SUPPORTED = 4;
    }
    optional ExceptionType type = 1;
    optional string message = 2;
    optional bool dispatched = 3;
  }
  oneof action {
    Response response = 1;
    Error error = 2;
    Exception exception = 3;
    bool crash = 4;
  }
}

message TestResponse {
  optional string message = 1;
}


// GetInfo

message GetInfoRequest {}

message GetInfoResponse {
  message ModuleInfo {
    optional string name = 1;
    optional string version = 2;
  }
  optional string version = 1;
  repeated ModuleInfo modules = 2;
}


// Connect OTDR

message ConnectOtdrRequest {
  message OtdrConnectionParameters {
    message Tcp {
      optional string host = 1;
      optional int32 port = 2;
    }
    message Usb {
    }
    oneof parameters {
      Tcp tcp = 1;
      Usb usb = 2;
    }
  }
  OtdrConnectionParameters connection_parameters = 1;
}

message ConnectOtdrResponse {
  message OtdrInfo {
    optional string mainframe_id = 1;
    optional string mainframe_serial_number = 2;
    optional string optical_module_serial_number = 3;
  }
  message OtdrSupportedMeasurementParameters {
    message LaserUnitSetPair {
      message LaserUnitSet {
        message DistanceRangeSetPair {
          message DistanceRangeSet {
            repeated string pulse_durations = 1;
            repeated string averaging_times = 2;
            repeated string live_refresh_times = 3;
            repeated string resolutions = 4;
          }

          optional string key = 1;
          DistanceRangeSet value = 2;
        }
        repeated DistanceRangeSetPair distance_ranges = 1;
        optional string connector = 2;
        repeated string dwdm_channels = 3;
        optional double estimated_dynamic_range = 4;
      }

      optional string key = 1;
      LaserUnitSet value = 2;
    }
    repeated LaserUnitSetPair laser_units = 1;
  }

  optional string device_handle = 1;
  OtdrInfo otdr_info = 2;
  OtdrSupportedMeasurementParameters otdr_supported_measurement_parameters = 3;
}


// Disconnect OTDR

message DisconnectOtdrRequest {
  optional string device_handle = 1;
}

message DisconnectOtdrResponse {
}


// Preset sor fields

message PresetSorFieldsRequest {
  optional string device_handle = 1;
  optional string add_supplier_parameters_sr = 2;
  optional string supplier_parameters_sn = 3;
  optional string supplier_parameters_otdr = 4;
  optional string supplier_parameters_omsn = 5;
  optional string supplier_parameters_mfid = 6;
  optional string supplier_parameters_omid = 7;
  optional string iit_parameters_vpsn = 8;
  optional string iit_parameters_vmsn = 9;
  optional string iit_parameters_vp_name = 10;
  optional string iit_parameters_vm_name = 11;
}

message PresetSorFieldsResponse {
}


// Set laser

message SetLaserRequest {
  optional string device_handle = 1;
  optional string laser_unit = 2;
  optional string dwdm_channel = 3;
}

message SetLaserResponse {
}


// Set optical line properties (PON)

message SetOpticalLinePropertiesRequest {
  enum OpticalLineKind {
    OPTICAL_LINE_KIND_UNSPECIFIED = 0;
    OPTICAL_LINE_KIND_POINT_TO_POINT = 1;
    OPTICAL_LINE_KIND_PON = 2;
    OPTICAL_LINE_KIND_PON_TO_ONT = 3;
  }

  optional string device_handle = 1;
  optional OpticalLineKind optical_line_kind = 2;
  repeated int32 splitters_ratios = 3;
}

message SetOpticalLinePropertiesResponse {
}


// Analyse optical line

message AnalyseOpticalLineRequest {
  optional string device_handle = 1;
}

message AnalyseOpticalLineResponse {
  optional double reflectance = 1;
  optional double loss = 2;
  optional int32 lmax_ns = 3;
  optional double snr = 4;
}


// Force optical line LmaxNs

message ForceOpticalLineLmaxRequest {
  optional string device_handle = 1;
  optional int32 lmax_ns = 2;
}

message ForceOpticalLineLmaxResponse {
}


// Prepare Vscout measurement parameters, must be called after
// AnalyseOpticalLine / ForceOpticalLineLmax

message PrepareVscoutRequest {
  optional string device_handle = 1;
  optional bool force_single_trace_acquisition = 2;
}

message PrepareVscoutResponse {
  optional int32 vscout_count = 1;
}


// Apply Vscout measurement parameters

message ApplyVscoutTraceAcquisitionParametersRequest {
  optional string device_handle = 1;
  optional int32 vscout_index = 2;
}

message ApplyVscoutTraceAcquisitionParametersResponse {
  optional bool vscout_applied = 1;
}


// Set refractive index

message SetRefractiveIndexRequest {
  optional string device_handle = 1;
  optional double refractive_index = 2;
}

message SetRefractiveIndexResponse {
}


// Set backscatter coefficient

message SetBackscatterCoefficientRequest {
  optional string device_handle = 1;
  optional double backscatter_coefficient = 2;
}

message SetBackscatterCoefficientResponse {
}


// Set distance range

message SetDistanceRangeRequest {
  optional string device_handle = 1;
  oneof distance_range_oneof {
    string distance_range = 2;
    double custom_distance_range = 3;
  }
}

message SetDistanceRangeResponse {
}


// Set resolution

message SetResolutionRequest {
  optional string device_handle = 1;
  optional string resolution = 2;
}

message SetResolutionResponse {
}


// Set pulse duration

message SetPulseDurationRequest {
  optional string device_handle = 1;
  oneof pulse_duration_oneof {
    string pulse_duration = 2;
    double custom_pulse_duration = 3;
  }
}

message SetPulseDurationResponse {
}


// Set averaging

message SetAveragingRequest {
  optional string device_handle = 1;
  optional string averaging_time = 2;
  optional int32 averaging_scale = 4; // 3 reserved for possible addition of averaging_count
}

message SetAveragingResponse {
}


// Set LIVE (aka FAST) mode refresh time

message SetLiveRefreshTimeRequest {
  optional string device_handle = 1;
  optional string live_refresh_time = 2;
}

message SetLiveRefreshTimeResponse {
}


// Set high resolution (DR/DZ) optimization

message SetHighResolutionOptimizationRequest {
  enum Optimization {
    OPTIMIZATION_UNSPECIFIED = 0;
    OPTIMIZATION_FOR_DEAD_ZONE = 1;
    OPTIMIZATION_FOR_DYNAMIC_RANGE = 2;
  }

  optional string device_handle = 1;
  optional Optimization optimization = 2;
}

message SetHighResolutionOptimizationResponse {
}


// Set parameters from SOR

message SetParametersFromSorRequest {
  optional string device_handle = 1;
  optional bytes sor_data = 2;
}

message SetParametersFromSorResponse {
}


// Start trace acquisition

message StartTraceAcquisitionRequest {
  enum Mode {
    MODE_UNSPECIFIED = 0;
    MODE_NORMAL = 1;
    MODE_LIVE = 2;
  }

  optional string device_handle = 1;
  optional Mode mode = 2;
  optional bool return_initial_trace = 3;
  optional int32 max_intermediate_trace_points_count = 4;
  optional bool force_photodiode_tuning = 5;
}

message StartTraceAcquisitionResponse {
  optional bytes trace = 1;
}


// Next trace acquisition step

message NextTraceAcquisitionStepRequest {
  optional string device_handle = 1;
  optional bool return_intermediate_trace = 2;
  optional bool return_final_trace = 3;
}

message NextTraceAcquisitionStepResponse {
  optional bool finished = 1;
  optional float progress = 2;
  optional bytes trace = 3;
}


// Stop trace acquisition

message AbortTraceAcquisitionRequest {
  optional string device_handle = 1;
  // Other members may be added later, i.g. for fast/full stop, and to get result trace
}

message AbortTraceAcquisitionResponse {
}


// Analyse trace

message AnalyseTraceRequest {
  optional string device_handle = 1;
  optional bytes trace = 2;
  AnalysisParameters analysis_parameters = 3;
}

message AnalyseTraceResponse {
  optional bytes trace = 1;
}


// Trace comparison

message CombinedThreshold {
  optional double min = 1;
  optional double max = 2;
  optional double decrease = 3;
  optional double increase = 4;
}

message QualifiedValue {
  enum ValueExactness {
    VALUE_EXACTNESS_UNSPECIFIED = 0;
    VALUE_EXACTNESS_EXACT = 1;
    VALUE_EXACTNESS_AT_LEAST = 2;
    VALUE_EXACTNESS_AT_MOST = 3;
  }

  optional double value = 1;
  optional ValueExactness exactness = 2;
}

message CompareTracesRequest {
  message ComparisonOptions {
    enum Mode {
      MODE_UNSPECIFIED = 0;
      MODE_NORMAL = 1;
      MODE_PON = 2;
      MODE_FIBERTEST = 3;
    }
    message ThresholdSetup {
      message Level {
        message ThresholdScopedGroup {
          message Scope {
            repeated int32 event_indices = 1;
          }
          message ThresholdGroup {
            optional CombinedThreshold event_loss = 1;
            optional CombinedThreshold event_reflectance = 2;
            optional CombinedThreshold event_leading_loss_coefficient = 3;
            optional CombinedThreshold event_max_level = 4;
            optional CombinedThreshold reflective_event_position = 5;
            optional CombinedThreshold non_reflective_event_position = 6;
          }
          Scope scope = 1;
          ThresholdGroup thresholds = 2;
        }
        message AdvancedThresholds {
          optional double attenuation_coefficient_change_for_new_events = 1;
          optional double eof_loss_change_for_fiber_break = 2;
          optional double eof_attenuation_coefficient_change_for_fiber_break = 3;
          optional double max_eof_attenuation_coefficient_for_fiber_break = 4;
          optional double noise_level_change_for_fiber_elongation = 5;
        }

        optional string name = 1;
        repeated ThresholdScopedGroup groups = 2;
        AdvancedThresholds advanced_thresholds = 3;
      }

      repeated Level levels = 1;
    }

    optional Mode mode = 1;
    ThresholdSetup thresholds_setup = 2;
  }

  // 1 reserved for device_handle
  optional int32 log_level = 2; // 0 - no logging
  repeated bytes reference_traces = 3;
  repeated bytes current_traces = 4;
  ComparisonOptions comparison_options = 5;
}

message CompareTracesResponse {
  message TraceDiff {
    message Change {
      enum ChangeType {
        CHANGE_TYPE_UNSPECIFIED = 0;
        CHANGE_TYPE_FIBER_BREAK = 1;
        CHANGE_TYPE_NEW_EVENT = 2;
        CHANGE_TYPE_MISSING_EVENT = 3;
        CHANGE_TYPE_EXCEEDED_THRESHOLD = 4;
        CHANGE_TYPE_NEW_EVENT_AFTER_EOF = 5;
      }
      enum Threshold {
        THRESHOLD_UNSPECIFIED = 0;
        THRESHOLD_EVENT_LOSS = 1;
        THRESHOLD_EVENT_REFLECTANCE = 2;
        THRESHOLD_EVENT_LEADING_LOSS_COEFFICIENT = 3;
        THRESHOLD_EVENT_MAX_LEVEL = 4;
      }
      enum CombinedThresholdPart {
        COMBINED_THRESHOLD_PART_UNSPECIFIED = 0;
        COMBINED_THRESHOLD_PART_MIN = 1;
        COMBINED_THRESHOLD_PART_MAX = 2;
        COMBINED_THRESHOLD_PART_DECREASE = 3;
        COMBINED_THRESHOLD_PART_INCREASE = 4;
      }

      optional ChangeType change_type = 1;
      optional Threshold exceeded_threshold = 2;
      optional CombinedThresholdPart exceeded_threshold_part = 3;
      optional double exceeded_threshold_part_value = 4;
      QualifiedValue exceeding_value = 5;
      optional double change_location = 6;
      CombinedThreshold location_threshold = 7;
      optional int32 current_event_index = 8;
      QualifiedValue current_event_loss = 9;
      QualifiedValue current_event_reflectance = 10;
      QualifiedValue current_event_leading_loss_coefficient = 11;
      QualifiedValue current_event_max_level = 12;
      optional int32 reference_event_index = 13;
      QualifiedValue reference_event_loss = 14;
      QualifiedValue reference_event_reflectance = 15;
      QualifiedValue reference_event_leading_loss_coefficient = 16;
      QualifiedValue reference_event_max_level = 17;
      optional string reference_event_comment = 18;
      optional bool reference_event_maps_to_current_event = 19;
    }

    message Level {
      optional string name = 1;
      repeated Change changes = 2;
    }

    repeated Level levels = 1;
  }

  optional string log = 1;
  repeated bytes current_traces = 2;
  TraceDiff trace_diff = 3;
}


// GenerateLinkmap

message GenerateLinkmapRequest {
  message Parameters {
    optional double macrobend_threshold = 1;
  }

  // 1 reserved for device_handle
  repeated bytes sors = 2;
  Parameters parameters = 3;
}

message GenerateLinkmapResponse {
  optional bytes linkmap = 1;
}
