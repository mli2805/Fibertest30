// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Fibertest30.Infrastructure;

#nullable disable

namespace Fibertest30.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(RtuContext))]
    [Migration("20240410110128_AlarmEventStatus")]
    partial class AlarmEventStatus
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.4");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Fibertest30.Application.AlarmProfileEf", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("AlarmProfile", (string)null);
                });

            modelBuilder.Entity("Fibertest30.Application.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Fibertest30.Application.CompletedOnDemand", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CompletedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("MeasurementSettings")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("MonitoringPortId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("MonitoringPortId");

                    b.ToTable("OnDemand", (string)null);
                });

            modelBuilder.Entity("Fibertest30.Application.CompletedOnDemandSor", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.HasKey("Id");

                    b.ToTable("OnDemandSor", (string)null);
                });

            modelBuilder.Entity("Fibertest30.Application.MonitoringAlarmEf", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ActiveAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Change")
                        .HasColumnType("TEXT");

                    b.Property<double?>("DistanceMeters")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("LastChangedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Level")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<int>("MonitoringPortId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MonitoringResultId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ResolvedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MonitoringPortId");

                    b.HasIndex("MonitoringResultId");

                    b.ToTable("Alarm", (string)null);
                });

            modelBuilder.Entity("Fibertest30.Application.MonitoringAlarmEventEf", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("At")
                        .HasColumnType("TEXT");

                    b.Property<string>("Change")
                        .HasColumnType("TEXT");

                    b.Property<double?>("DistanceMeters")
                        .HasColumnType("REAL");

                    b.Property<string>("Level")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<int>("MonitoringAlarmId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MonitoringPortId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MonitoringResultId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OldLevel")
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<string>("OldStatus")
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MonitoringAlarmId");

                    b.HasIndex("MonitoringPortId");

                    b.HasIndex("MonitoringResultId");

                    b.ToTable("AlarmEvent", (string)null);
                });

            modelBuilder.Entity("Fibertest30.Application.MonitoringBaselineEf", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("MeasurementSettings")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("MonitoringPortId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("MonitoringPortId");

                    b.ToTable("Baseline", (string)null);
                });

            modelBuilder.Entity("Fibertest30.Application.MonitoringBaselineSorEf", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.HasKey("Id");

                    b.ToTable("BaselineSor", (string)null);
                });

            modelBuilder.Entity("Fibertest30.Application.MonitoringPortEf", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AlarmProfileId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("BaselineId")
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan?>("Interval")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastRun")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SchedulerMode")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AlarmProfileId");

                    b.HasIndex("BaselineId")
                        .IsUnique();

                    b.ToTable("MonitoringPort", (string)null);
                });

            modelBuilder.Entity("Fibertest30.Application.MonitoringResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BaselineId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CompletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("MeasurementSettings")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("MonitoringPortId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BaselineId");

                    b.HasIndex("MonitoringPortId");

                    b.ToTable("Monitoring", (string)null);
                });

            modelBuilder.Entity("Fibertest30.Application.MonitoringResultSor", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.HasKey("Id");

                    b.ToTable("MonitoringSor", (string)null);
                });

            modelBuilder.Entity("Fibertest30.Application.MonitoringTimeSlotEf", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EndTime")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("MonitoringPortId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StartTime")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MonitoringPortId");

                    b.ToTable("MonitoringTimeSlot", (string)null);
                });

            modelBuilder.Entity("Fibertest30.Application.OtauEf", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("JsonData")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("OcmPortIndex")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("OfflineAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("OnlineAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("PortCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Rack")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Shelf")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Otau", (string)null);
                });

            modelBuilder.Entity("Fibertest30.Application.OtauPortEf", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("MonitoringPortId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OtauId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PortIndex")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Unavailable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.HasKey("Id");

                    b.HasIndex("MonitoringPortId")
                        .IsUnique();

                    b.HasIndex("OtauId", "PortIndex")
                        .IsUnique();

                    b.ToTable("OtauPort", (string)null);
                });

            modelBuilder.Entity("Fibertest30.Application.SystemEventEf", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("At")
                        .HasColumnType("TEXT");

                    b.Property<string>("JsonData")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Level")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<string>("Source")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SystemEvent", (string)null);
                });

            modelBuilder.Entity("Fibertest30.Application.ThresholdEf", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AlarmProfileId")
                        .IsRequired()
                        .HasColumnType("INTEGER");

                    b.Property<double?>("Critical")
                        .HasColumnType("REAL");

                    b.Property<bool>("IsCriticalOn")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsMajorOn")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsMinorOn")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("Major")
                        .HasColumnType("REAL");

                    b.Property<double?>("Minor")
                        .HasColumnType("REAL");

                    b.Property<string>("Parameter")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AlarmProfileId");

                    b.ToTable("Threshold", (string)null);
                });

            modelBuilder.Entity("Fibertest30.Application.UserAlarmNotificationEf", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<int>("AlarmEventId")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserId", "AlarmEventId");

                    b.HasIndex("AlarmEventId");

                    b.ToTable("UserAlarmNotification", (string)null);
                });

            modelBuilder.Entity("Fibertest30.Application.UserSettings", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("DateTimeFormat")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Theme")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.ToTable("UserSettings", (string)null);
                });

            modelBuilder.Entity("Fibertest30.Application.UserSystemNotificationEf", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<int>("SystemEventId")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserId", "SystemEventId");

                    b.HasIndex("SystemEventId");

                    b.ToTable("UserSystemNotification", (string)null);
                });

            modelBuilder.Entity("Fibertest30.Infrastructure.Persistence.Entities.NotificationSettingsEf", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EmailServer")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TrapReceiver")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("NotificationSettings", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Fibertest30.Application.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Fibertest30.Application.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fibertest30.Application.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Fibertest30.Application.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Fibertest30.Application.CompletedOnDemand", b =>
                {
                    b.HasOne("Fibertest30.Application.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fibertest30.Application.MonitoringPortEf", null)
                        .WithMany()
                        .HasForeignKey("MonitoringPortId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Fibertest30.Application.CompletedOnDemandSor", b =>
                {
                    b.HasOne("Fibertest30.Application.CompletedOnDemand", null)
                        .WithOne("Sor")
                        .HasForeignKey("Fibertest30.Application.CompletedOnDemandSor", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Fibertest30.Application.MonitoringAlarmEf", b =>
                {
                    b.HasOne("Fibertest30.Application.MonitoringPortEf", "MonitoringPort")
                        .WithMany()
                        .HasForeignKey("MonitoringPortId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fibertest30.Application.MonitoringResult", "MonitoringResult")
                        .WithMany()
                        .HasForeignKey("MonitoringResultId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MonitoringPort");

                    b.Navigation("MonitoringResult");
                });

            modelBuilder.Entity("Fibertest30.Application.MonitoringAlarmEventEf", b =>
                {
                    b.HasOne("Fibertest30.Application.MonitoringAlarmEf", "Alarm")
                        .WithMany("Events")
                        .HasForeignKey("MonitoringAlarmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fibertest30.Application.MonitoringPortEf", "MonitoringPort")
                        .WithMany()
                        .HasForeignKey("MonitoringPortId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fibertest30.Application.MonitoringResult", "MonitoringResult")
                        .WithMany()
                        .HasForeignKey("MonitoringResultId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Alarm");

                    b.Navigation("MonitoringPort");

                    b.Navigation("MonitoringResult");
                });

            modelBuilder.Entity("Fibertest30.Application.MonitoringBaselineEf", b =>
                {
                    b.HasOne("Fibertest30.Application.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("Fibertest30.Application.MonitoringPortEf", null)
                        .WithMany("BaselineHistory")
                        .HasForeignKey("MonitoringPortId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Fibertest30.Application.MonitoringBaselineSorEf", b =>
                {
                    b.HasOne("Fibertest30.Application.MonitoringBaselineEf", null)
                        .WithOne("Sor")
                        .HasForeignKey("Fibertest30.Application.MonitoringBaselineSorEf", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Fibertest30.Application.MonitoringPortEf", b =>
                {
                    b.HasOne("Fibertest30.Application.AlarmProfileEf", null)
                        .WithMany("MonitoringPorts")
                        .HasForeignKey("AlarmProfileId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Fibertest30.Application.MonitoringBaselineEf", "Baseline")
                        .WithOne()
                        .HasForeignKey("Fibertest30.Application.MonitoringPortEf", "BaselineId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Baseline");
                });

            modelBuilder.Entity("Fibertest30.Application.MonitoringResult", b =>
                {
                    b.HasOne("Fibertest30.Application.MonitoringBaselineEf", null)
                        .WithMany()
                        .HasForeignKey("BaselineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fibertest30.Application.MonitoringPortEf", null)
                        .WithMany()
                        .HasForeignKey("MonitoringPortId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Fibertest30.Application.MonitoringResultSor", b =>
                {
                    b.HasOne("Fibertest30.Application.MonitoringResult", null)
                        .WithOne("Sor")
                        .HasForeignKey("Fibertest30.Application.MonitoringResultSor", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Fibertest30.Application.MonitoringTimeSlotEf", b =>
                {
                    b.HasOne("Fibertest30.Application.MonitoringPortEf", "MonitoringPort")
                        .WithMany("TimeSlots")
                        .HasForeignKey("MonitoringPortId");

                    b.Navigation("MonitoringPort");
                });

            modelBuilder.Entity("Fibertest30.Application.OtauPortEf", b =>
                {
                    b.HasOne("Fibertest30.Application.MonitoringPortEf", "MonitoringPort")
                        .WithOne("OtauPort")
                        .HasForeignKey("Fibertest30.Application.OtauPortEf", "MonitoringPortId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Fibertest30.Application.OtauEf", "Otau")
                        .WithMany("Ports")
                        .HasForeignKey("OtauId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MonitoringPort");

                    b.Navigation("Otau");
                });

            modelBuilder.Entity("Fibertest30.Application.SystemEventEf", b =>
                {
                    b.HasOne("Fibertest30.Application.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Fibertest30.Application.ThresholdEf", b =>
                {
                    b.HasOne("Fibertest30.Application.AlarmProfileEf", null)
                        .WithMany("Thresholds")
                        .HasForeignKey("AlarmProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Fibertest30.Application.UserAlarmNotificationEf", b =>
                {
                    b.HasOne("Fibertest30.Application.MonitoringAlarmEventEf", "AlarmEvent")
                        .WithMany()
                        .HasForeignKey("AlarmEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fibertest30.Application.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AlarmEvent");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Fibertest30.Application.UserSettings", b =>
                {
                    b.HasOne("Fibertest30.Application.ApplicationUser", "User")
                        .WithOne("UserSettings")
                        .HasForeignKey("Fibertest30.Application.UserSettings", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Fibertest30.Application.UserSystemNotificationEf", b =>
                {
                    b.HasOne("Fibertest30.Application.SystemEventEf", "SystemEvent")
                        .WithMany()
                        .HasForeignKey("SystemEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fibertest30.Application.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SystemEvent");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Fibertest30.Application.AlarmProfileEf", b =>
                {
                    b.Navigation("MonitoringPorts");

                    b.Navigation("Thresholds");
                });

            modelBuilder.Entity("Fibertest30.Application.ApplicationUser", b =>
                {
                    b.Navigation("UserSettings");
                });

            modelBuilder.Entity("Fibertest30.Application.CompletedOnDemand", b =>
                {
                    b.Navigation("Sor");
                });

            modelBuilder.Entity("Fibertest30.Application.MonitoringAlarmEf", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("Fibertest30.Application.MonitoringBaselineEf", b =>
                {
                    b.Navigation("Sor");
                });

            modelBuilder.Entity("Fibertest30.Application.MonitoringPortEf", b =>
                {
                    b.Navigation("BaselineHistory");

                    b.Navigation("OtauPort")
                        .IsRequired();

                    b.Navigation("TimeSlots");
                });

            modelBuilder.Entity("Fibertest30.Application.MonitoringResult", b =>
                {
                    b.Navigation("Sor");
                });

            modelBuilder.Entity("Fibertest30.Application.OtauEf", b =>
                {
                    b.Navigation("Ports");
                });
#pragma warning restore 612, 618
        }
    }
}
