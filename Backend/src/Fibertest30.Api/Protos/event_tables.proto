syntax = "proto3";
import "data.core.proto";
import "events.data.proto";

option csharp_namespace = "Fibertest30.Api";
package fibertest30.event_tables;

service EventTables {
  rpc GetSystemEvents (GetSystemEventsRequest) returns (GetSystemEventsResponse);
  rpc GetOpticalEvent (GetOpticalEventRequest) returns (GetOpticalEventResponse);
  rpc GetOpticalEvents (GetOpticalEventsRequest) returns (GetOpticalEventsResponse);
  rpc GetNetworkEvent (GetNetworkEventRequest) returns (GetNetworkEventResponse);
  rpc GetNetworkEvents (GetNetworkEventsRequest) returns (GetNetworkEventsResponse);
  rpc GetBopEvent (GetBopEventRequest) returns (GetBopEventResponse);
  rpc GetBopEvents (GetBopEventsRequest) returns (GetBopEventsResponse);
  rpc GetRtuAccident (GetRtuAccidentRequest) returns (GetRtuAccidentResponse);
  rpc GetRtuAccidents (GetRtuAccidentsRequest) returns (GetRtuAccidentsResponse);
  rpc GetHasCurrent(GetHasCurrentRequest) returns (GetHasCurrentResponse);
}

message GetSystemEventsRequest {
}

message GetSystemEventsResponse {
    repeated data.core.SystemEvent systemEvents = 1;
}

// GetOpticalEvent
message GetOpticalEventRequest {
    int32 eventId = 1;
}

message GetOpticalEventResponse {
   events.data.OpticalEvent opticalEvent = 1;
}

// GetOpticalEvents
message GetOpticalEventsRequest {
    bool currentEvents = 1;
    events.data.DateTimeFilter dateTimeFilter = 2;
    int32 portionSize = 3;
}

message GetOpticalEventsResponse {
    repeated events.data.OpticalEvent opticalEvents = 1;
}

// GetNetworkEvent
message GetNetworkEventRequest {
    int32 eventId = 1;
}

message GetNetworkEventResponse {
    events.data.NetworkEvent networkEvent = 1;
}

// GetNetworkEvents
message GetNetworkEventsRequest {
    bool currentEvents = 1;
    events.data.DateTimeFilter dateTimeFilter = 2;
    int32 portionSize = 3;
}

message GetNetworkEventsResponse {
    repeated events.data.NetworkEvent networkEvents = 1;
}

// GetBopEvent
message GetBopEventRequest {
    int32 eventId = 1;
}

message GetBopEventResponse {
    events.data.BopEvent bopEvent = 1;
}

// GetBopEvents
message GetBopEventsRequest {
    bool currentEvents = 1;
    events.data.DateTimeFilter dateTimeFilter = 2;
    int32 portionSize = 3;
}

message GetBopEventsResponse {
    repeated events.data.BopEvent bopEvents = 1;
}

// GetRtuAccident
message GetRtuAccidentRequest {
    int32 eventId = 1;
}

message GetRtuAccidentResponse {
    events.data.RtuAccident rtuAccident = 1;
}

// GetRtuAccidents
message GetRtuAccidentsRequest {
    bool currentAccidents = 1;
    events.data.DateTimeFilter dateTimeFilter = 2;
    int32 portionSize = 3;
}

message GetRtuAccidentsResponse {
    repeated events.data.RtuAccident rtuAccidents = 1;
}

message GetHasCurrentRequest {
}

message GetHasCurrentResponse {
    data.core.HasCurrentEvents hasCurrentEvents = 1;
}


