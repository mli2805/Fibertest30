syntax = "proto3";
import "ft.enums.proto";
import "rtu_tree.proto";

option csharp_namespace = "Fibertest30.Api";
package fibertest30.rtu_mgmt;

service RtuMgmt {
	rpc TestRtuConnection (TestRtuConnectionRequest) returns (TestRtuConnectionResponse);
	rpc InitializeRtu (InitializeRtuRequest) returns (InitializeRtuResponse);
	rpc DoMeasurementClient(DoMeasurementClientRequest) returns (EmptyResponse);
	rpc GetMeasurementClientSor(GetMeasurementClientSorRequest) returns (GetSorResponse);
	rpc GetMeasurementSor(GetMeasurementSorRequest) returns (GetSorResponse);

	rpc StopMonitoring(StopMonitoringRequest) returns (EmptyResponse);
	rpc ApplyMonitoringSettings(ApplyMonitoringSettingsRequest) returns (ApplyMonitoringSettingsResponse);
	rpc AssignBaseRefs(AssignBaseRefsRequest) returns (AssignBaseRefsResponse);
}

message DoubleAddress {
	rtu_tree.NetAddress main = 1;
    bool hasReserveAddress = 2;
	rtu_tree.NetAddress reserve = 3;
}

message MeasParamByPosition {
	int32 param = 1;
	int32 position = 2;
}

message InitializeRtuDto {
	string rtuId = 1;
	DoubleAddress rtuAddresses = 2;
}

message RtuInitializedDto {
	bool isInitialized = 1;
}

message DoMeasurementClientDto {
	string rtuId = 1;
	repeated rtu_tree.PortOfOtau portOfOtau = 2;
	repeated MeasParamByPosition measParamsByPosition = 3;
}

message PortWithTraceDto {
	string traceId = 1;
	rtu_tree.PortOfOtau portOfOtau = 2;
	ft.enums.FiberState lastTraceState = 3;
	int32 lastRtuAccidentOnTrace = 4; // from ReturnCode
}

message ApplyMonitoringSettingsDto {
	string rtuId = 1;
	ft.enums.RtuMaker rtuMaker = 2;
	bool isMonitoringOn = 3;

	int32 preciseMeas = 4; // in hours, 0 - permanently, 9999 never
	int32 preciseSave = 5;
	int32 fastSave = 6;

	repeated PortWithTraceDto ports = 7;
}

message BaseRefFile {
	ft.enums.BaseRefType baseRefType = 1;
    optional bytes fileBytes = 2; 
	bool isForDelete = 3;
}

message AssignBaseRefsDto {
	string rtuId = 1;
	ft.enums.RtuMaker rtuMaker = 2;

	string traceId = 3;
	optional rtu_tree.PortOfOtau portOfOtau = 4;

	repeated BaseRefFile baseRefFiles = 5;
	repeated int32 deleteSors = 6;
}

message BaseRefsAssignedDto {
	int32 returnCode = 1;
	
	ft.enums.BaseRefType baseRefType = 2;
	int32 nodes = 3;
	int32 equipments = 4;
	int32 landmarks = 5;
	optional string waveLength = 6;
}

message RequestAnswer {
	int32 returnCode = 1;
	string errorMessage = 2;
}


//------------------------------------------------------------

message TestRtuConnectionRequest {
	// not RtuId because it could be new address
	rtu_tree.NetAddress netAddress = 1;
}

message TestRtuConnectionResponse {
	rtu_tree.NetAddress netAddress = 1;
	bool isConnectionSuccessful = 2;
}

message InitializeRtuRequest {
	InitializeRtuDto dto = 1;
}

message InitializeRtuResponse {
	RtuInitializedDto dto = 1;
}

message DoMeasurementClientRequest{
	DoMeasurementClientDto dto = 1;
}

message GetMeasurementClientSorRequest {
	string measurementClientId = 1;
}

message GetSorResponse {
	bytes measurement = 1;
	//  there is no baseline in sor for measurementClient
	optional bytes baseline = 2; 
	bytes file = 3;
	optional bytes baselineBytes = 4;
}

message GetMeasurementSorRequest {
	int32 sorFileId = 1;
}

message StopMonitoringRequest {
	string rtuId = 1;
}

message EmptyResponse {
}

message ApplyMonitoringSettingsRequest {
	ApplyMonitoringSettingsDto dto = 1;
}

message ApplyMonitoringSettingsResponse {
	RequestAnswer dto = 1;
}

message AssignBaseRefsRequest{
	AssignBaseRefsDto dto = 1;
}

message AssignBaseRefsResponse{
	BaseRefsAssignedDto dto = 1;
}