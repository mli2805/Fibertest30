syntax = "proto3";
import "ft.enums.proto";

option csharp_namespace = "Fibertest30.Api";
package fibertest30.rtu_tree;

service RtuTree {
	rpc GetRtuTree (GetRtuTreeRequest) returns (GetRtuTreeResponse);
    rpc GetRtu (GetRtuRequest) returns (GetRtuResponse);
    rpc AttachTrace (AttachTraceRequest) returns (AttachTraceResponse);
    rpc DetachTrace (DetachTraceRequest) returns (DetachTraceResponse);
    rpc AttachOtau (AttachOtauRequest) returns (AttachOtauResponse);
    rpc DetachOtau (DetachOtauRequest) returns (DetachOtauResponse);
}


message NetAddress {
    string ip4Address = 1;
    string hostName = 2;
    int32 port = 3;
}

message LeafOfAcceptableMeasParams {
    repeated string resolutions = 1;
    repeated string pulseDurations = 2;
    repeated string periodsToAverage = 3;
    repeated string measCountsToAverage = 4;
}

message DistanceMeasParam {
    string distance = 1;
    LeafOfAcceptableMeasParams otherParams = 2;
}

message BranchOfAcceptableMeasParams {
    repeated DistanceMeasParam distances = 1;
    double backscatterCoeff = 2;
    double refractiveIndex = 3;
}

message UnitMeasParam {
    string unit = 1;
    BranchOfAcceptableMeasParams branch = 2;
}

message TreeOfAcceptableMeasParams {
    repeated UnitMeasParam units = 1;
}

message MeasurementSettingsStrings {
    string laser = 1;
    string backscatterCoeff = 2;
    string refractiveIndex = 3;
    string distance = 4;
    string pulse = 5;
    string resolution = 6;
    string averagingTime = 7;
}

message PortOfOtau {
    optional string otauId = 1; // main MAK-100 OTAU has no ID, but BOP has its ID
    optional NetAddress otauNetAddress = 2; // only for BOP
    
    string otauSerial = 3;
    int32 opticalPort = 4;
    bool isPortOnMainCharon = 5;
    optional int32 mainCharonPort = 6; // only for BOP
}

message Trace {
	string traceId = 1;
	string rtuId = 2;
	string title = 3;
    optional PortOfOtau port = 4; // there is no PortOfOtau if trace is detached
	bool isAttached = 5;
    ft.enums.FiberState state = 6;
    bool hasEnoughBaseRefsToPerformMonitoring = 7;
    bool isIncludedInMonitoringCycle = 8;
    ft.enums.TceLinkState tceLinkState = 9;
    int32 fastDuration = 10;
    int32 preciseDuration = 11;
    int32 additionalDuration = 12;
    int32 preciseSorId = 13;
    int32 fastSorId = 14;
    int32 additionalSorId = 15;
}

message Bop {
    string bopId = 1;
	string rtuId = 2;
    NetAddress bopNetAddress = 3;
    int32 masterPort = 4;
    bool isOk = 5;
    string serial = 6;
    int32 portCount = 7;

	repeated Trace traces = 8;
}

message Rtu {
	string rtuId = 1;
    ft.enums.RtuMaker rtuMaker = 2;
	string title = 3;

    optional string mfid = 4;
    optional string mfsn = 5;
    optional string omid = 6;
    optional string omsn = 7;
    optional string serial = 8;

    int32 ownPortCount = 9;
    int32 fullPortCount = 10;

    NetAddress mainChannel = 11;
	ft.enums.RtuPartState mainChannelState = 12;
    NetAddress reserveChannel = 13;
	ft.enums.RtuPartState reserveChannelState = 14;
    bool isReserveChannelSet = 15;

    NetAddress otdrNetAddress = 16;
	ft.enums.MonitoringState monitoringMode = 17;
    int32 preciseMeas = 18;
    int32 preciseSave = 19;
    int32 fastSave = 20;
    
    optional string version = 21;
    optional string version2 = 22;

	repeated Bop bops = 23;
	repeated Trace traces = 24;

    optional TreeOfAcceptableMeasParams treeOfAcceptableMeasParams = 25;
}

message GetRtuTreeRequest {}
message GetRtuTreeResponse {
	repeated Rtu rtus = 1;
}

message GetRtuRequest {
	string rtuId = 1;
}
message GetRtuResponse {
	Rtu rtu = 1;
}

message AttachTraceRequest {
    string traceId = 1;
	repeated rtu_tree.PortOfOtau portOfOtau = 2;
}

message AttachTraceResponse {}

message DetachTraceRequest {
    string traceId = 1;
}
message DetachTraceResponse {}

message AttachOtauRequest {
	string rtuId = 1;
    NetAddress netAddress = 2;
    int32 opticalPort = 3;
}
message AttachOtauResponse {
}

message DetachOtauRequest {
    string rtuId = 1;
    string otauId = 2;
    NetAddress netAddress = 3;
    int32 opticalPort = 4;
}

message DetachOtauResponse {
}
