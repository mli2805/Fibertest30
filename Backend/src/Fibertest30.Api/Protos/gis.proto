syntax = "proto3";
import "ft.enums.proto";

option csharp_namespace = "Fibertest30.Api";
package fibertest30.gis;

service Gis {
	rpc GetAllGeoData(GetAllGeoDataRequest) returns (GetAllGeoDataResponse);
	rpc GetFiberInfo(GetFiberInfoRequest) returns (GetFiberInfoResponse);

	rpc GetLandmarksModel(GetLandmarksModelRequest) returns (GetLandmarksModelResponse);
	rpc CreateLandmarksModel(CreateLandmarksModelRequest) returns (CreateLandmarksModelResponse);
	rpc UpdateLandmarksModel(UpdateLandmarksModelRequest) returns (UpdateLandmarksModelResponse);
	rpc DeleteLandmarksModel(DeleteLandmarksModelRequest) returns (DeleteLandmarksModelResponse);
}

enum EquipmentType {
	Nothing = 0;
	AdjustmentPoint = 100;

    EmptyNode = 200;

    CableReserve = 300;

    Other = 400;
    Closure = 402;
    Cross = 403;
    Well = 405;
    Terminal = 406;

    Rtu = 500;

    AccidentPlace = 501;
}

enum GpsInputMode {
	Degrees = 0;
	Minutes = 1;
	Seconds = 2;
}

// if dictionary is empty - fiber is not in trace (NotInTrace)
message FiberStateDictionaryItem {
	string traceId = 1; // key
	ft.enums.FiberState traceState = 2; // value
}

message GeoCoordinate {
  double latitude = 1;
  double longitude = 2;
}

message TraceNode {
	string id = 1;
	string title = 2;
	GeoCoordinate coors = 3;
	EquipmentType equipmentType = 4;
	string comment = 5;

	optional ft.enums.FiberState state = 6;
	optional string accidentOnTraceId = 7;
}

message GeoEquipment {
	string id = 1;
	string nodeId = 2;
	string title = 3;
	EquipmentType type = 4;
	int32 cableReserveLeft = 5;
	int32 cableReserveRight = 6;
	string comment = 7;
}

message GeoFiber {
	string id = 1;
	string node1id = 2;
	GeoCoordinate coors1 = 3;
	string node2id = 4;
	GeoCoordinate coors2 = 5;
	repeated FiberStateDictionaryItem states = 7;
	repeated FiberStateDictionaryItem tracesWithExceededLossCoeff = 8;
}

message OpticalLength {
	string traceId = 1;
	double length = 2;
}

message FiberInfo {
	string fiberId = 1;
	string leftNodeTitle = 2;
	string rightNodeTitle = 3;
	double gpsLength = 4;
	double userInputedLength = 5;

	repeated OpticalLength tracesThrough = 6;
	bool hasTraceUnderMonitoring = 7;
}

message ColoredLandmark {
	string nodeId = 1;
	string fiberId = 2;

	int32 number = 3;
	int32 numberIncludingAdjustmentPoints = 4;

	string nodeTitle = 5;
	string nodeTitleColor = 6;
	string nodeComment = 7;
	string nodeCommentColor = 8;

	string equipmentId = 9;
	string equipmentTitle = 10;
	string equipmentTitleColor = 11;

	int32 leftCableReserve = 12;
	int32 rightCableReserve = 13;
    string cableReservesColor = 14;

	double gpsDistance = 15;
	double gpsSection = 16;
	bool isUserInput = 17;
	string gpsSectionColor = 18;

	double opticalDistance = 19; 
    double opticalSection = 20;
    int32 eventNumber = 21;

    GeoCoordinate gpsCoors = 22;
    string gpsCoorsColor = 23;

	EquipmentType equipmentType = 24;
	string equipmentTypeColor = 25;

	bool isFromBase = 26;
}

message LandmarksModel {
	string landmarksModelId = 1;
	repeated ColoredLandmark landmarks = 2;
}

message GeoTrace {
	string id = 1;
	string title = 2;
	repeated string nodeIds = 3;
	repeated string equipmentIds = 4;
	repeated string fiberIds = 5;
	bool hasAnyBaseRef = 6;
	ft.enums.FiberState state = 7;
	bool darkMode = 8;
	string comment = 9;
}

message AllGeoData {
	repeated GeoFiber fibers = 1;
	repeated TraceNode nodes = 2;
	repeated GeoTrace traces = 3;
	repeated GeoEquipment equipments = 4;
}

// GetAllGeoData
message GetAllGeoDataRequest {}

message GetAllGeoDataResponse {
	AllGeoData data = 1;
}

// GetFiberInfo
message GetFiberInfoRequest {
	string fiberId = 1;
}

message GetFiberInfoResponse {
	FiberInfo fiberInfo = 1;
}

// GetLandmarksModel
message GetLandmarksModelRequest {
	string landmarksModelId = 1;
}

message GetLandmarksModelResponse {
	LandmarksModel landmarksModel = 1;
}

// CreateLandmarksModel
message CreateLandmarksModelRequest {
	string landmarksModelId = 1;
	string traceId = 2;
	GpsInputMode gpsInputMode = 3;
}

message CreateLandmarksModelResponse {}

// UpdateLandmarksModel
message UpdateLandmarksModelRequest {
	string landmarksModelId = 1;
	optional ColoredLandmark changedLandmark = 2;
	optional string gpsInputMode = 3;
	optional bool isFilterOn = 4;
}

message UpdateLandmarksModelResponse {}

// DeleteLandmarksModel
message DeleteLandmarksModelRequest {
	string landmarksModelId = 1;
}

message DeleteLandmarksModelResponse {}