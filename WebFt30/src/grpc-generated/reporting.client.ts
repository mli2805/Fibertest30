// @generated by protobuf-ts 2.9.4 with parameter long_type_string,optimize_code_size
// @generated from protobuf file "reporting.proto" (package "fibertest30.reporting", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Reporting } from "./reporting";
import type { GetMonitoringTraceAndBaseResponse } from "./reporting";
import type { GetMonitoringTraceAndBaseRequest } from "./reporting";
import type { GetLastMonitoringLinkmapResponse } from "./reporting";
import type { GetLastMonitoringLinkmapRequest } from "./reporting";
import type { GetLastMonitoringTraceResponse } from "./reporting";
import type { GetLastMonitoringTraceRequest } from "./reporting";
import type { GetLastMonitoringResponse } from "./reporting";
import type { GetLastMonitoringRequest } from "./reporting";
import type { GetAlarmEventsResponse } from "./reporting";
import type { GetAlarmEventsRequest } from "./reporting";
import type { GetBaselineLinkmapResponse } from "./reporting";
import type { GetBaselineLinkmapRequest } from "./reporting";
import type { GetBaselineTraceResponse } from "./reporting";
import type { GetBaselineTraceRequest } from "./reporting";
import type { GetBaselineResponse } from "./reporting";
import type { GetBaselineRequest } from "./reporting";
import type { GetBaselinesResponse } from "./reporting";
import type { GetBaselinesRequest } from "./reporting";
import type { GetMonitoringLinkmapResponse } from "./reporting";
import type { GetMonitoringLinkmapRequest } from "./reporting";
import type { GetMonitoringTraceResponse } from "./reporting";
import type { GetMonitoringTraceRequest } from "./reporting";
import type { GetMonitoringResponse } from "./reporting";
import type { GetMonitoringRequest } from "./reporting";
import type { GetMonitoringsResponse } from "./reporting";
import type { GetMonitoringsRequest } from "./reporting";
import type { GetSystemEventsResponse } from "./reporting";
import type { GetSystemEventsRequest } from "./reporting";
import type { GetAllAlarmsResponse } from "./reporting";
import type { GetAllAlarmsRequest } from "./reporting";
import type { GetActiveAlarmsResponse } from "./reporting";
import type { GetActiveAlarmsRequest } from "./reporting";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { GetAlarmResponse } from "./reporting";
import type { GetAlarmRequest } from "./reporting";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service fibertest30.reporting.Reporting
 */
export interface IReportingClient {
    /**
     * @generated from protobuf rpc: GetAlarm(fibertest30.reporting.GetAlarmRequest) returns (fibertest30.reporting.GetAlarmResponse);
     */
    getAlarm(input: GetAlarmRequest, options?: RpcOptions): UnaryCall<GetAlarmRequest, GetAlarmResponse>;
    /**
     * @generated from protobuf rpc: GetActiveAlarms(fibertest30.reporting.GetActiveAlarmsRequest) returns (fibertest30.reporting.GetActiveAlarmsResponse);
     */
    getActiveAlarms(input: GetActiveAlarmsRequest, options?: RpcOptions): UnaryCall<GetActiveAlarmsRequest, GetActiveAlarmsResponse>;
    /**
     * @generated from protobuf rpc: GetAllAlarms(fibertest30.reporting.GetAllAlarmsRequest) returns (fibertest30.reporting.GetAllAlarmsResponse);
     */
    getAllAlarms(input: GetAllAlarmsRequest, options?: RpcOptions): UnaryCall<GetAllAlarmsRequest, GetAllAlarmsResponse>;
    /**
     * @generated from protobuf rpc: GetSystemEvents(fibertest30.reporting.GetSystemEventsRequest) returns (fibertest30.reporting.GetSystemEventsResponse);
     */
    getSystemEvents(input: GetSystemEventsRequest, options?: RpcOptions): UnaryCall<GetSystemEventsRequest, GetSystemEventsResponse>;
    /**
     * @generated from protobuf rpc: GetMonitorings(fibertest30.reporting.GetMonitoringsRequest) returns (fibertest30.reporting.GetMonitoringsResponse);
     */
    getMonitorings(input: GetMonitoringsRequest, options?: RpcOptions): UnaryCall<GetMonitoringsRequest, GetMonitoringsResponse>;
    /**
     * @generated from protobuf rpc: GetMonitoring(fibertest30.reporting.GetMonitoringRequest) returns (fibertest30.reporting.GetMonitoringResponse);
     */
    getMonitoring(input: GetMonitoringRequest, options?: RpcOptions): UnaryCall<GetMonitoringRequest, GetMonitoringResponse>;
    /**
     * @generated from protobuf rpc: GetMonitoringTrace(fibertest30.reporting.GetMonitoringTraceRequest) returns (fibertest30.reporting.GetMonitoringTraceResponse);
     */
    getMonitoringTrace(input: GetMonitoringTraceRequest, options?: RpcOptions): UnaryCall<GetMonitoringTraceRequest, GetMonitoringTraceResponse>;
    /**
     * @generated from protobuf rpc: GetMonitoringLinkmap(fibertest30.reporting.GetMonitoringLinkmapRequest) returns (fibertest30.reporting.GetMonitoringLinkmapResponse);
     */
    getMonitoringLinkmap(input: GetMonitoringLinkmapRequest, options?: RpcOptions): UnaryCall<GetMonitoringLinkmapRequest, GetMonitoringLinkmapResponse>;
    /**
     * @generated from protobuf rpc: GetBaselines(fibertest30.reporting.GetBaselinesRequest) returns (fibertest30.reporting.GetBaselinesResponse);
     */
    getBaselines(input: GetBaselinesRequest, options?: RpcOptions): UnaryCall<GetBaselinesRequest, GetBaselinesResponse>;
    /**
     * @generated from protobuf rpc: GetBaseline(fibertest30.reporting.GetBaselineRequest) returns (fibertest30.reporting.GetBaselineResponse);
     */
    getBaseline(input: GetBaselineRequest, options?: RpcOptions): UnaryCall<GetBaselineRequest, GetBaselineResponse>;
    /**
     * @generated from protobuf rpc: GetBaselineTrace(fibertest30.reporting.GetBaselineTraceRequest) returns (fibertest30.reporting.GetBaselineTraceResponse);
     */
    getBaselineTrace(input: GetBaselineTraceRequest, options?: RpcOptions): UnaryCall<GetBaselineTraceRequest, GetBaselineTraceResponse>;
    /**
     * @generated from protobuf rpc: GetBaselineLinkmap(fibertest30.reporting.GetBaselineLinkmapRequest) returns (fibertest30.reporting.GetBaselineLinkmapResponse);
     */
    getBaselineLinkmap(input: GetBaselineLinkmapRequest, options?: RpcOptions): UnaryCall<GetBaselineLinkmapRequest, GetBaselineLinkmapResponse>;
    /**
     * @generated from protobuf rpc: GetAlarmEvents(fibertest30.reporting.GetAlarmEventsRequest) returns (fibertest30.reporting.GetAlarmEventsResponse);
     */
    getAlarmEvents(input: GetAlarmEventsRequest, options?: RpcOptions): UnaryCall<GetAlarmEventsRequest, GetAlarmEventsResponse>;
    /**
     * @generated from protobuf rpc: GetLastMonitoring(fibertest30.reporting.GetLastMonitoringRequest) returns (fibertest30.reporting.GetLastMonitoringResponse);
     */
    getLastMonitoring(input: GetLastMonitoringRequest, options?: RpcOptions): UnaryCall<GetLastMonitoringRequest, GetLastMonitoringResponse>;
    /**
     * @generated from protobuf rpc: GetLastMonitoringTrace(fibertest30.reporting.GetLastMonitoringTraceRequest) returns (fibertest30.reporting.GetLastMonitoringTraceResponse);
     */
    getLastMonitoringTrace(input: GetLastMonitoringTraceRequest, options?: RpcOptions): UnaryCall<GetLastMonitoringTraceRequest, GetLastMonitoringTraceResponse>;
    /**
     * @generated from protobuf rpc: GetLastMonitoringLinkmap(fibertest30.reporting.GetLastMonitoringLinkmapRequest) returns (fibertest30.reporting.GetLastMonitoringLinkmapResponse);
     */
    getLastMonitoringLinkmap(input: GetLastMonitoringLinkmapRequest, options?: RpcOptions): UnaryCall<GetLastMonitoringLinkmapRequest, GetLastMonitoringLinkmapResponse>;
    /**
     * @generated from protobuf rpc: GetMonitoringTraceAndBase(fibertest30.reporting.GetMonitoringTraceAndBaseRequest) returns (fibertest30.reporting.GetMonitoringTraceAndBaseResponse);
     */
    getMonitoringTraceAndBase(input: GetMonitoringTraceAndBaseRequest, options?: RpcOptions): UnaryCall<GetMonitoringTraceAndBaseRequest, GetMonitoringTraceAndBaseResponse>;
}
/**
 * @generated from protobuf service fibertest30.reporting.Reporting
 */
export class ReportingClient implements IReportingClient, ServiceInfo {
    typeName = Reporting.typeName;
    methods = Reporting.methods;
    options = Reporting.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: GetAlarm(fibertest30.reporting.GetAlarmRequest) returns (fibertest30.reporting.GetAlarmResponse);
     */
    getAlarm(input: GetAlarmRequest, options?: RpcOptions): UnaryCall<GetAlarmRequest, GetAlarmResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetAlarmRequest, GetAlarmResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetActiveAlarms(fibertest30.reporting.GetActiveAlarmsRequest) returns (fibertest30.reporting.GetActiveAlarmsResponse);
     */
    getActiveAlarms(input: GetActiveAlarmsRequest, options?: RpcOptions): UnaryCall<GetActiveAlarmsRequest, GetActiveAlarmsResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetActiveAlarmsRequest, GetActiveAlarmsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetAllAlarms(fibertest30.reporting.GetAllAlarmsRequest) returns (fibertest30.reporting.GetAllAlarmsResponse);
     */
    getAllAlarms(input: GetAllAlarmsRequest, options?: RpcOptions): UnaryCall<GetAllAlarmsRequest, GetAllAlarmsResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetAllAlarmsRequest, GetAllAlarmsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetSystemEvents(fibertest30.reporting.GetSystemEventsRequest) returns (fibertest30.reporting.GetSystemEventsResponse);
     */
    getSystemEvents(input: GetSystemEventsRequest, options?: RpcOptions): UnaryCall<GetSystemEventsRequest, GetSystemEventsResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetSystemEventsRequest, GetSystemEventsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetMonitorings(fibertest30.reporting.GetMonitoringsRequest) returns (fibertest30.reporting.GetMonitoringsResponse);
     */
    getMonitorings(input: GetMonitoringsRequest, options?: RpcOptions): UnaryCall<GetMonitoringsRequest, GetMonitoringsResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetMonitoringsRequest, GetMonitoringsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetMonitoring(fibertest30.reporting.GetMonitoringRequest) returns (fibertest30.reporting.GetMonitoringResponse);
     */
    getMonitoring(input: GetMonitoringRequest, options?: RpcOptions): UnaryCall<GetMonitoringRequest, GetMonitoringResponse> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetMonitoringRequest, GetMonitoringResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetMonitoringTrace(fibertest30.reporting.GetMonitoringTraceRequest) returns (fibertest30.reporting.GetMonitoringTraceResponse);
     */
    getMonitoringTrace(input: GetMonitoringTraceRequest, options?: RpcOptions): UnaryCall<GetMonitoringTraceRequest, GetMonitoringTraceResponse> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetMonitoringTraceRequest, GetMonitoringTraceResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetMonitoringLinkmap(fibertest30.reporting.GetMonitoringLinkmapRequest) returns (fibertest30.reporting.GetMonitoringLinkmapResponse);
     */
    getMonitoringLinkmap(input: GetMonitoringLinkmapRequest, options?: RpcOptions): UnaryCall<GetMonitoringLinkmapRequest, GetMonitoringLinkmapResponse> {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetMonitoringLinkmapRequest, GetMonitoringLinkmapResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetBaselines(fibertest30.reporting.GetBaselinesRequest) returns (fibertest30.reporting.GetBaselinesResponse);
     */
    getBaselines(input: GetBaselinesRequest, options?: RpcOptions): UnaryCall<GetBaselinesRequest, GetBaselinesResponse> {
        const method = this.methods[8], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetBaselinesRequest, GetBaselinesResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetBaseline(fibertest30.reporting.GetBaselineRequest) returns (fibertest30.reporting.GetBaselineResponse);
     */
    getBaseline(input: GetBaselineRequest, options?: RpcOptions): UnaryCall<GetBaselineRequest, GetBaselineResponse> {
        const method = this.methods[9], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetBaselineRequest, GetBaselineResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetBaselineTrace(fibertest30.reporting.GetBaselineTraceRequest) returns (fibertest30.reporting.GetBaselineTraceResponse);
     */
    getBaselineTrace(input: GetBaselineTraceRequest, options?: RpcOptions): UnaryCall<GetBaselineTraceRequest, GetBaselineTraceResponse> {
        const method = this.methods[10], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetBaselineTraceRequest, GetBaselineTraceResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetBaselineLinkmap(fibertest30.reporting.GetBaselineLinkmapRequest) returns (fibertest30.reporting.GetBaselineLinkmapResponse);
     */
    getBaselineLinkmap(input: GetBaselineLinkmapRequest, options?: RpcOptions): UnaryCall<GetBaselineLinkmapRequest, GetBaselineLinkmapResponse> {
        const method = this.methods[11], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetBaselineLinkmapRequest, GetBaselineLinkmapResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetAlarmEvents(fibertest30.reporting.GetAlarmEventsRequest) returns (fibertest30.reporting.GetAlarmEventsResponse);
     */
    getAlarmEvents(input: GetAlarmEventsRequest, options?: RpcOptions): UnaryCall<GetAlarmEventsRequest, GetAlarmEventsResponse> {
        const method = this.methods[12], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetAlarmEventsRequest, GetAlarmEventsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetLastMonitoring(fibertest30.reporting.GetLastMonitoringRequest) returns (fibertest30.reporting.GetLastMonitoringResponse);
     */
    getLastMonitoring(input: GetLastMonitoringRequest, options?: RpcOptions): UnaryCall<GetLastMonitoringRequest, GetLastMonitoringResponse> {
        const method = this.methods[13], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetLastMonitoringRequest, GetLastMonitoringResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetLastMonitoringTrace(fibertest30.reporting.GetLastMonitoringTraceRequest) returns (fibertest30.reporting.GetLastMonitoringTraceResponse);
     */
    getLastMonitoringTrace(input: GetLastMonitoringTraceRequest, options?: RpcOptions): UnaryCall<GetLastMonitoringTraceRequest, GetLastMonitoringTraceResponse> {
        const method = this.methods[14], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetLastMonitoringTraceRequest, GetLastMonitoringTraceResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetLastMonitoringLinkmap(fibertest30.reporting.GetLastMonitoringLinkmapRequest) returns (fibertest30.reporting.GetLastMonitoringLinkmapResponse);
     */
    getLastMonitoringLinkmap(input: GetLastMonitoringLinkmapRequest, options?: RpcOptions): UnaryCall<GetLastMonitoringLinkmapRequest, GetLastMonitoringLinkmapResponse> {
        const method = this.methods[15], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetLastMonitoringLinkmapRequest, GetLastMonitoringLinkmapResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetMonitoringTraceAndBase(fibertest30.reporting.GetMonitoringTraceAndBaseRequest) returns (fibertest30.reporting.GetMonitoringTraceAndBaseResponse);
     */
    getMonitoringTraceAndBase(input: GetMonitoringTraceAndBaseRequest, options?: RpcOptions): UnaryCall<GetMonitoringTraceAndBaseRequest, GetMonitoringTraceAndBaseResponse> {
        const method = this.methods[16], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetMonitoringTraceAndBaseRequest, GetMonitoringTraceAndBaseResponse>("unary", this._transport, method, opt, input);
    }
}
