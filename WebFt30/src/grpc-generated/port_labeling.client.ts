// @generated by protobuf-ts 2.9.4 with parameter long_type_string,optimize_code_size
// @generated from protobuf file "port_labeling.proto" (package "fibertest30.port_labeling", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { PortLabeling } from "./port_labeling";
import type { DetachPortLabelAndRemoveIfLastResponse } from "./port_labeling";
import type { DetachPortLabelAndRemoveIfLastRequest } from "./port_labeling";
import type { AttachPortLabelResponse } from "./port_labeling";
import type { AttachPortLabelRequest } from "./port_labeling";
import type { UpdatePortLabelResponse } from "./port_labeling";
import type { UpdatePortLabelRequest } from "./port_labeling";
import type { AddAndAttachPortLabelResponse } from "./port_labeling";
import type { AddAndAttachPortLabelRequest } from "./port_labeling";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { GetPortLabelsResponse } from "./port_labeling";
import type { GetPortLabelsRequest } from "./port_labeling";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 *
 * Service to handle port labeling operations.
 *
 * Port labeling allows users to assign labels to monitoring ports for better visualization and filtering capabilities.
 *
 * The port label name max length is 50 characters.
 * The port label hex color must be in the hex format, e.g. "#000000".
 *
 * Note: The port labels are loaded to the client during startup via Core.GetDeviceInfo,
 * so client almost never needs to call GetPortLabels.
 *
 * Command responses are empty as the server sends the state change events to all connected clients using server streaming.
 *
 * @generated from protobuf service fibertest30.port_labeling.PortLabeling
 */
export interface IPortLabelingClient {
    /**
     * Returns all port labels.
     *
     * @generated from protobuf rpc: GetPortLabels(fibertest30.port_labeling.GetPortLabelsRequest) returns (fibertest30.port_labeling.GetPortLabelsResponse);
     */
    getPortLabels(input: GetPortLabelsRequest, options?: RpcOptions): UnaryCall<GetPortLabelsRequest, GetPortLabelsResponse>;
    /**
     * Adds a new port label and attaches it to a specified monitoring port.
     *
     * @generated from protobuf rpc: AddAndAttachPortLabel(fibertest30.port_labeling.AddAndAttachPortLabelRequest) returns (fibertest30.port_labeling.AddAndAttachPortLabelResponse);
     */
    addAndAttachPortLabel(input: AddAndAttachPortLabelRequest, options?: RpcOptions): UnaryCall<AddAndAttachPortLabelRequest, AddAndAttachPortLabelResponse>;
    /**
     * Updates the details of an existing port label.
     *
     * @generated from protobuf rpc: UpdatePortLabel(fibertest30.port_labeling.UpdatePortLabelRequest) returns (fibertest30.port_labeling.UpdatePortLabelResponse);
     */
    updatePortLabel(input: UpdatePortLabelRequest, options?: RpcOptions): UnaryCall<UpdatePortLabelRequest, UpdatePortLabelResponse>;
    /**
     * Attaches an existing port label to a monitoring port.
     *
     * @generated from protobuf rpc: AttachPortLabel(fibertest30.port_labeling.AttachPortLabelRequest) returns (fibertest30.port_labeling.AttachPortLabelResponse);
     */
    attachPortLabel(input: AttachPortLabelRequest, options?: RpcOptions): UnaryCall<AttachPortLabelRequest, AttachPortLabelResponse>;
    /**
     * Detaches a port label from a monitoring port and removes the label if it's the last attachment.
     *
     * @generated from protobuf rpc: DetachPortLabelAndRemoveIfLast(fibertest30.port_labeling.DetachPortLabelAndRemoveIfLastRequest) returns (fibertest30.port_labeling.DetachPortLabelAndRemoveIfLastResponse);
     */
    detachPortLabelAndRemoveIfLast(input: DetachPortLabelAndRemoveIfLastRequest, options?: RpcOptions): UnaryCall<DetachPortLabelAndRemoveIfLastRequest, DetachPortLabelAndRemoveIfLastResponse>;
}
/**
 *
 * Service to handle port labeling operations.
 *
 * Port labeling allows users to assign labels to monitoring ports for better visualization and filtering capabilities.
 *
 * The port label name max length is 50 characters.
 * The port label hex color must be in the hex format, e.g. "#000000".
 *
 * Note: The port labels are loaded to the client during startup via Core.GetDeviceInfo,
 * so client almost never needs to call GetPortLabels.
 *
 * Command responses are empty as the server sends the state change events to all connected clients using server streaming.
 *
 * @generated from protobuf service fibertest30.port_labeling.PortLabeling
 */
export class PortLabelingClient implements IPortLabelingClient, ServiceInfo {
    typeName = PortLabeling.typeName;
    methods = PortLabeling.methods;
    options = PortLabeling.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Returns all port labels.
     *
     * @generated from protobuf rpc: GetPortLabels(fibertest30.port_labeling.GetPortLabelsRequest) returns (fibertest30.port_labeling.GetPortLabelsResponse);
     */
    getPortLabels(input: GetPortLabelsRequest, options?: RpcOptions): UnaryCall<GetPortLabelsRequest, GetPortLabelsResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetPortLabelsRequest, GetPortLabelsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Adds a new port label and attaches it to a specified monitoring port.
     *
     * @generated from protobuf rpc: AddAndAttachPortLabel(fibertest30.port_labeling.AddAndAttachPortLabelRequest) returns (fibertest30.port_labeling.AddAndAttachPortLabelResponse);
     */
    addAndAttachPortLabel(input: AddAndAttachPortLabelRequest, options?: RpcOptions): UnaryCall<AddAndAttachPortLabelRequest, AddAndAttachPortLabelResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<AddAndAttachPortLabelRequest, AddAndAttachPortLabelResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Updates the details of an existing port label.
     *
     * @generated from protobuf rpc: UpdatePortLabel(fibertest30.port_labeling.UpdatePortLabelRequest) returns (fibertest30.port_labeling.UpdatePortLabelResponse);
     */
    updatePortLabel(input: UpdatePortLabelRequest, options?: RpcOptions): UnaryCall<UpdatePortLabelRequest, UpdatePortLabelResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdatePortLabelRequest, UpdatePortLabelResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Attaches an existing port label to a monitoring port.
     *
     * @generated from protobuf rpc: AttachPortLabel(fibertest30.port_labeling.AttachPortLabelRequest) returns (fibertest30.port_labeling.AttachPortLabelResponse);
     */
    attachPortLabel(input: AttachPortLabelRequest, options?: RpcOptions): UnaryCall<AttachPortLabelRequest, AttachPortLabelResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<AttachPortLabelRequest, AttachPortLabelResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Detaches a port label from a monitoring port and removes the label if it's the last attachment.
     *
     * @generated from protobuf rpc: DetachPortLabelAndRemoveIfLast(fibertest30.port_labeling.DetachPortLabelAndRemoveIfLastRequest) returns (fibertest30.port_labeling.DetachPortLabelAndRemoveIfLastResponse);
     */
    detachPortLabelAndRemoveIfLast(input: DetachPortLabelAndRemoveIfLastRequest, options?: RpcOptions): UnaryCall<DetachPortLabelAndRemoveIfLastRequest, DetachPortLabelAndRemoveIfLastResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<DetachPortLabelAndRemoveIfLastRequest, DetachPortLabelAndRemoveIfLastResponse>("unary", this._transport, method, opt, input);
    }
}
