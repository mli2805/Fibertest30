// @generated by protobuf-ts 2.9.4 with parameter long_type_string,optimize_code_size
// @generated from protobuf file "data.otdr.proto" (package "fibertest30.data.otdr", syntax proto3)
// tslint:disable
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message fibertest30.data.otdr.OtdrMeasurementParameterSet
 */
export interface OtdrMeasurementParameterSet {
    /**
     * @generated from protobuf field: repeated fibertest30.data.otdr.LaserUnit laser_units = 1;
     */
    laserUnits: LaserUnit[];
}
/**
 * @generated from protobuf message fibertest30.data.otdr.LaserUnit
 */
export interface LaserUnit {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: repeated fibertest30.data.otdr.DistanceRange distance_ranges = 2;
     */
    distanceRanges: DistanceRange[];
    /**
     * @generated from protobuf field: repeated string dwdm_channels = 3;
     */
    dwdmChannels: string[];
}
/**
 * @generated from protobuf message fibertest30.data.otdr.DistanceRange
 */
export interface DistanceRange {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: repeated string pulse_durations = 2;
     */
    pulseDurations: string[];
    /**
     * @generated from protobuf field: repeated string averaging_times = 3;
     */
    averagingTimes: string[];
    /**
     * @generated from protobuf field: repeated string resolutions = 4;
     */
    resolutions: string[];
    /**
     * @generated from protobuf field: repeated string live_averaging_times = 5;
     */
    liveAveragingTimes: string[];
}
/**
 * @generated from protobuf message fibertest30.data.otdr.MeasurementSettings
 */
export interface MeasurementSettings {
    /**
     * @generated from protobuf field: fibertest30.data.otdr.MeasurementType measurementType = 1;
     */
    measurementType: MeasurementType;
    /**
     * @generated from protobuf field: fibertest30.data.otdr.NetworkType networkType = 2;
     */
    networkType: NetworkType;
    /**
     * @generated from protobuf field: double backscatterCoeff = 3;
     */
    backscatterCoeff: number;
    /**
     * @generated from protobuf field: double refractiveIndex = 4;
     */
    refractiveIndex: number;
    /**
     * @generated from protobuf field: string laser = 5;
     */
    laser: string;
    /**
     * @generated from protobuf field: string distanceRange = 6;
     */
    distanceRange: string;
    /**
     * @generated from protobuf field: string averagingTime = 7;
     */
    averagingTime: string;
    /**
     * @generated from protobuf field: string pulse = 8;
     */
    pulse: string;
    /**
     * @generated from protobuf field: string samplingResolution = 9;
     */
    samplingResolution: string;
    /**
     * @generated from protobuf field: double eventLossThreshold = 10;
     */
    eventLossThreshold: number;
    /**
     * @generated from protobuf field: double eventReflectanceThreshold = 11;
     */
    eventReflectanceThreshold: number;
    /**
     * @generated from protobuf field: double endOfFiberThreshold = 12;
     */
    endOfFiberThreshold: number;
    /**
     * @generated from protobuf field: bool fastMeasurement = 13;
     */
    fastMeasurement: boolean;
    /**
     * @generated from protobuf field: bool checkConnectionQuality = 14;
     */
    checkConnectionQuality: boolean;
    /**
     * @generated from protobuf field: double splitter1dB = 15 [json_name = "splitter1dB"];
     */
    splitter1DB: number;
    /**
     * @generated from protobuf field: double splitter2dB = 16 [json_name = "splitter2dB"];
     */
    splitter2DB: number;
    /**
     * @generated from protobuf field: int32 mux = 17;
     */
    mux: number;
}
/**
 * @generated from protobuf enum fibertest30.data.otdr.MeasurementType
 */
export enum MeasurementType {
    /**
     * @generated from protobuf enum value: Manual = 0;
     */
    Manual = 0,
    /**
     *  VScoutAllLasers = ;
     *  VScoutSingleLaser = ;
     *  ManualRealtime = ;
     *  AutoRealtime = ;
     *  AutoSkipMeasurement = ;
     *  VscoutSkipMeasurement = ;
     *
     * @generated from protobuf enum value: Auto = 1;
     */
    Auto = 1
}
/**
 * @generated from protobuf enum fibertest30.data.otdr.NetworkType
 */
export enum NetworkType {
    /**
     * @generated from protobuf enum value: PointToPoint = 0;
     */
    PointToPoint = 0,
    /**
     * @generated from protobuf enum value: ManualPON = 1;
     */
    ManualPON = 1,
    /**
     * @generated from protobuf enum value: AutoPON = 2;
     */
    AutoPON = 2,
    /**
     * @generated from protobuf enum value: xWDM = 3;
     */
    xWDM = 3,
    /**
     * @generated from protobuf enum value: AutoPonToOnt = 4;
     */
    AutoPonToOnt = 4
}
// @generated message type with reflection information, may provide speed optimized methods
class OtdrMeasurementParameterSet$Type extends MessageType<OtdrMeasurementParameterSet> {
    constructor() {
        super("fibertest30.data.otdr.OtdrMeasurementParameterSet", [
            { no: 1, name: "laser_units", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => LaserUnit }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message fibertest30.data.otdr.OtdrMeasurementParameterSet
 */
export const OtdrMeasurementParameterSet = new OtdrMeasurementParameterSet$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LaserUnit$Type extends MessageType<LaserUnit> {
    constructor() {
        super("fibertest30.data.otdr.LaserUnit", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "distance_ranges", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => DistanceRange },
            { no: 3, name: "dwdm_channels", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message fibertest30.data.otdr.LaserUnit
 */
export const LaserUnit = new LaserUnit$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DistanceRange$Type extends MessageType<DistanceRange> {
    constructor() {
        super("fibertest30.data.otdr.DistanceRange", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "pulse_durations", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "averaging_times", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "resolutions", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "live_averaging_times", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message fibertest30.data.otdr.DistanceRange
 */
export const DistanceRange = new DistanceRange$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MeasurementSettings$Type extends MessageType<MeasurementSettings> {
    constructor() {
        super("fibertest30.data.otdr.MeasurementSettings", [
            { no: 1, name: "measurementType", kind: "enum", T: () => ["fibertest30.data.otdr.MeasurementType", MeasurementType] },
            { no: 2, name: "networkType", kind: "enum", T: () => ["fibertest30.data.otdr.NetworkType", NetworkType] },
            { no: 3, name: "backscatterCoeff", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 4, name: "refractiveIndex", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 5, name: "laser", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "distanceRange", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "averagingTime", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "pulse", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "samplingResolution", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "eventLossThreshold", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 11, name: "eventReflectanceThreshold", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 12, name: "endOfFiberThreshold", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 13, name: "fastMeasurement", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 14, name: "checkConnectionQuality", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 15, name: "splitter1dB", kind: "scalar", jsonName: "splitter1dB", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 16, name: "splitter2dB", kind: "scalar", jsonName: "splitter2dB", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 17, name: "mux", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message fibertest30.data.otdr.MeasurementSettings
 */
export const MeasurementSettings = new MeasurementSettings$Type();
