// @generated by protobuf-ts 2.9.4 with parameter long_type_string,optimize_code_size
// @generated from protobuf file "identity.proto" (package "fibertest30.Identity", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Identity } from "./identity";
import type { GetAllRolesResponse } from "./identity";
import type { GetAllRolesRequest } from "./identity";
import type { DeleteUserResponse } from "./identity";
import type { DeleteUserRequest } from "./identity";
import type { UpdateUserResponse } from "./identity";
import type { UpdateUserRequest } from "./identity";
import type { CreateUserResponse } from "./identity";
import type { CreateUserRequest } from "./identity";
import type { GetUserResponse } from "./identity";
import type { GetUserRequest } from "./identity";
import type { GetAllUsersResponse } from "./identity";
import type { GetAllUsersRequest } from "./identity";
import type { SaveUserSettingsResponse } from "./identity";
import type { SaveUserSettingsRequest } from "./identity";
import type { GetCurrentUserResponse } from "./identity";
import type { GetCurrentUserRequest } from "./identity";
import type { IsAuthenticatedResponse } from "./identity";
import type { IsAuthenticatedRequest } from "./identity";
import type { RefreshTokenResponse } from "./identity";
import type { RefreshTokenRequest } from "./identity";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { LoginResponse } from "./identity";
import type { LoginRequest } from "./identity";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service fibertest30.Identity.Identity
 */
export interface IIdentityClient {
    /**
     * @generated from protobuf rpc: Login(fibertest30.Identity.LoginRequest) returns (fibertest30.Identity.LoginResponse);
     */
    login(input: LoginRequest, options?: RpcOptions): UnaryCall<LoginRequest, LoginResponse>;
    /**
     * @generated from protobuf rpc: RefreshToken(fibertest30.Identity.RefreshTokenRequest) returns (fibertest30.Identity.RefreshTokenResponse);
     */
    refreshToken(input: RefreshTokenRequest, options?: RpcOptions): UnaryCall<RefreshTokenRequest, RefreshTokenResponse>;
    /**
     * @generated from protobuf rpc: IsAuthenticated(fibertest30.Identity.IsAuthenticatedRequest) returns (fibertest30.Identity.IsAuthenticatedResponse);
     */
    isAuthenticated(input: IsAuthenticatedRequest, options?: RpcOptions): UnaryCall<IsAuthenticatedRequest, IsAuthenticatedResponse>;
    /**
     * Todo: consider moving user settings to a separate service
     *
     * @generated from protobuf rpc: GetCurrentUser(fibertest30.Identity.GetCurrentUserRequest) returns (fibertest30.Identity.GetCurrentUserResponse);
     */
    getCurrentUser(input: GetCurrentUserRequest, options?: RpcOptions): UnaryCall<GetCurrentUserRequest, GetCurrentUserResponse>;
    /**
     * @generated from protobuf rpc: SaveUserSettings(fibertest30.Identity.SaveUserSettingsRequest) returns (fibertest30.Identity.SaveUserSettingsResponse);
     */
    saveUserSettings(input: SaveUserSettingsRequest, options?: RpcOptions): UnaryCall<SaveUserSettingsRequest, SaveUserSettingsResponse>;
    /**
     * @generated from protobuf rpc: GetAllUsers(fibertest30.Identity.GetAllUsersRequest) returns (fibertest30.Identity.GetAllUsersResponse);
     */
    getAllUsers(input: GetAllUsersRequest, options?: RpcOptions): UnaryCall<GetAllUsersRequest, GetAllUsersResponse>;
    /**
     * @generated from protobuf rpc: GetUser(fibertest30.Identity.GetUserRequest) returns (fibertest30.Identity.GetUserResponse);
     */
    getUser(input: GetUserRequest, options?: RpcOptions): UnaryCall<GetUserRequest, GetUserResponse>;
    /**
     * @generated from protobuf rpc: CreateUser(fibertest30.Identity.CreateUserRequest) returns (fibertest30.Identity.CreateUserResponse);
     */
    createUser(input: CreateUserRequest, options?: RpcOptions): UnaryCall<CreateUserRequest, CreateUserResponse>;
    /**
     * @generated from protobuf rpc: UpdateUser(fibertest30.Identity.UpdateUserRequest) returns (fibertest30.Identity.UpdateUserResponse);
     */
    updateUser(input: UpdateUserRequest, options?: RpcOptions): UnaryCall<UpdateUserRequest, UpdateUserResponse>;
    /**
     * @generated from protobuf rpc: DeleteUser(fibertest30.Identity.DeleteUserRequest) returns (fibertest30.Identity.DeleteUserResponse);
     */
    deleteUser(input: DeleteUserRequest, options?: RpcOptions): UnaryCall<DeleteUserRequest, DeleteUserResponse>;
    /**
     * @generated from protobuf rpc: GetAllRoles(fibertest30.Identity.GetAllRolesRequest) returns (fibertest30.Identity.GetAllRolesResponse);
     */
    getAllRoles(input: GetAllRolesRequest, options?: RpcOptions): UnaryCall<GetAllRolesRequest, GetAllRolesResponse>;
}
/**
 * @generated from protobuf service fibertest30.Identity.Identity
 */
export class IdentityClient implements IIdentityClient, ServiceInfo {
    typeName = Identity.typeName;
    methods = Identity.methods;
    options = Identity.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: Login(fibertest30.Identity.LoginRequest) returns (fibertest30.Identity.LoginResponse);
     */
    login(input: LoginRequest, options?: RpcOptions): UnaryCall<LoginRequest, LoginResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<LoginRequest, LoginResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: RefreshToken(fibertest30.Identity.RefreshTokenRequest) returns (fibertest30.Identity.RefreshTokenResponse);
     */
    refreshToken(input: RefreshTokenRequest, options?: RpcOptions): UnaryCall<RefreshTokenRequest, RefreshTokenResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<RefreshTokenRequest, RefreshTokenResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: IsAuthenticated(fibertest30.Identity.IsAuthenticatedRequest) returns (fibertest30.Identity.IsAuthenticatedResponse);
     */
    isAuthenticated(input: IsAuthenticatedRequest, options?: RpcOptions): UnaryCall<IsAuthenticatedRequest, IsAuthenticatedResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<IsAuthenticatedRequest, IsAuthenticatedResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Todo: consider moving user settings to a separate service
     *
     * @generated from protobuf rpc: GetCurrentUser(fibertest30.Identity.GetCurrentUserRequest) returns (fibertest30.Identity.GetCurrentUserResponse);
     */
    getCurrentUser(input: GetCurrentUserRequest, options?: RpcOptions): UnaryCall<GetCurrentUserRequest, GetCurrentUserResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetCurrentUserRequest, GetCurrentUserResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SaveUserSettings(fibertest30.Identity.SaveUserSettingsRequest) returns (fibertest30.Identity.SaveUserSettingsResponse);
     */
    saveUserSettings(input: SaveUserSettingsRequest, options?: RpcOptions): UnaryCall<SaveUserSettingsRequest, SaveUserSettingsResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<SaveUserSettingsRequest, SaveUserSettingsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetAllUsers(fibertest30.Identity.GetAllUsersRequest) returns (fibertest30.Identity.GetAllUsersResponse);
     */
    getAllUsers(input: GetAllUsersRequest, options?: RpcOptions): UnaryCall<GetAllUsersRequest, GetAllUsersResponse> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetAllUsersRequest, GetAllUsersResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetUser(fibertest30.Identity.GetUserRequest) returns (fibertest30.Identity.GetUserResponse);
     */
    getUser(input: GetUserRequest, options?: RpcOptions): UnaryCall<GetUserRequest, GetUserResponse> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetUserRequest, GetUserResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: CreateUser(fibertest30.Identity.CreateUserRequest) returns (fibertest30.Identity.CreateUserResponse);
     */
    createUser(input: CreateUserRequest, options?: RpcOptions): UnaryCall<CreateUserRequest, CreateUserResponse> {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateUserRequest, CreateUserResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpdateUser(fibertest30.Identity.UpdateUserRequest) returns (fibertest30.Identity.UpdateUserResponse);
     */
    updateUser(input: UpdateUserRequest, options?: RpcOptions): UnaryCall<UpdateUserRequest, UpdateUserResponse> {
        const method = this.methods[8], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateUserRequest, UpdateUserResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DeleteUser(fibertest30.Identity.DeleteUserRequest) returns (fibertest30.Identity.DeleteUserResponse);
     */
    deleteUser(input: DeleteUserRequest, options?: RpcOptions): UnaryCall<DeleteUserRequest, DeleteUserResponse> {
        const method = this.methods[9], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteUserRequest, DeleteUserResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetAllRoles(fibertest30.Identity.GetAllRolesRequest) returns (fibertest30.Identity.GetAllRolesResponse);
     */
    getAllRoles(input: GetAllRolesRequest, options?: RpcOptions): UnaryCall<GetAllRolesRequest, GetAllRolesResponse> {
        const method = this.methods[10], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetAllRolesRequest, GetAllRolesResponse>("unary", this._transport, method, opt, input);
    }
}
