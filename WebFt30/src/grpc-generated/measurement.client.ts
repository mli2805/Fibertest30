// @generated by protobuf-ts 2.9.4 with parameter long_type_string,optimize_code_size
// @generated from protobuf file "measurement.proto" (package "fibertest30.measurement", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Measurement } from "./measurement";
import type { UpdateTimeSettingsResponse } from "./measurement";
import type { UpdateTimeSettingsRequest } from "./measurement";
import type { GetTimeSettingsResponse } from "./measurement";
import type { GetTimeSettingsRequest } from "./measurement";
import type { UpdateNetworkSettingsResponse } from "./measurement";
import type { UpdateNetworkSettingsRequest } from "./measurement";
import type { GetNetworkSettingsResponse } from "./measurement";
import type { GetNetworkSettingsRequest } from "./measurement";
import type { TestTrapReceiverSettingsResponse } from "./measurement";
import type { TestTrapReceiverSettingsRequest } from "./measurement";
import type { TestEmailServerSettingsResponse } from "./measurement";
import type { TestEmailServerSettingsRequest } from "./measurement";
import type { GetNotificationSettingsResponse } from "./measurement";
import type { GetNotificationSettingsRequest } from "./measurement";
import type { UpdateNotificationSettingsResponse } from "./measurement";
import type { UpdateNotificationSettingsRequest } from "./measurement";
import type { GetBaselineProgressTraceResponse } from "./measurement";
import type { GetBaselineProgressTraceRequest } from "./measurement";
import type { StopBaselineSetupResponse } from "./measurement";
import type { StopBaselineSetupRequest } from "./measurement";
import type { StartBaselineSetupResponse } from "./measurement";
import type { StartBaselineSetupRequest } from "./measurement";
import type { SetMonitoringPortNoteResponse } from "./measurement";
import type { SetMonitoringPortNoteRequest } from "./measurement";
import type { SetMonitoringPortScheduleResponse } from "./measurement";
import type { SetMonitoringPortScheduleRequest } from "./measurement";
import type { GetOtauMonitoringPortsResponse } from "./measurement";
import type { GetOtauMonitoringPortsRequest } from "./measurement";
import type { GetMonitoringPortResponse } from "./measurement";
import type { GetMonitoringPortRequest } from "./measurement";
import type { SetMonitoringPortStatusResponse } from "./measurement";
import type { SetMonitoringPortStatusRequest } from "./measurement";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { GetSorSampleResponse } from "./measurement";
import type { GetSorSampleRequest } from "./measurement";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service fibertest30.measurement.Measurement
 */
export interface IMeasurementClient {
    /**
     * @generated from protobuf rpc: GetSorSample(fibertest30.measurement.GetSorSampleRequest) returns (fibertest30.measurement.GetSorSampleResponse);
     */
    getSorSample(input: GetSorSampleRequest, options?: RpcOptions): UnaryCall<GetSorSampleRequest, GetSorSampleResponse>;
    /**
     * @generated from protobuf rpc: SetMonitoringPortStatus(fibertest30.measurement.SetMonitoringPortStatusRequest) returns (fibertest30.measurement.SetMonitoringPortStatusResponse);
     */
    setMonitoringPortStatus(input: SetMonitoringPortStatusRequest, options?: RpcOptions): UnaryCall<SetMonitoringPortStatusRequest, SetMonitoringPortStatusResponse>;
    /**
     * @generated from protobuf rpc: GetMonitoringPort(fibertest30.measurement.GetMonitoringPortRequest) returns (fibertest30.measurement.GetMonitoringPortResponse);
     */
    getMonitoringPort(input: GetMonitoringPortRequest, options?: RpcOptions): UnaryCall<GetMonitoringPortRequest, GetMonitoringPortResponse>;
    /**
     * @generated from protobuf rpc: GetOtauMonitoringPorts(fibertest30.measurement.GetOtauMonitoringPortsRequest) returns (fibertest30.measurement.GetOtauMonitoringPortsResponse);
     */
    getOtauMonitoringPorts(input: GetOtauMonitoringPortsRequest, options?: RpcOptions): UnaryCall<GetOtauMonitoringPortsRequest, GetOtauMonitoringPortsResponse>;
    /**
     * @generated from protobuf rpc: SetMonitoringPortSchedule(fibertest30.measurement.SetMonitoringPortScheduleRequest) returns (fibertest30.measurement.SetMonitoringPortScheduleResponse);
     */
    setMonitoringPortSchedule(input: SetMonitoringPortScheduleRequest, options?: RpcOptions): UnaryCall<SetMonitoringPortScheduleRequest, SetMonitoringPortScheduleResponse>;
    /**
     * Sets text note for a specific monitoring port.
     *
     * @generated from protobuf rpc: SetMonitoringPortNote(fibertest30.measurement.SetMonitoringPortNoteRequest) returns (fibertest30.measurement.SetMonitoringPortNoteResponse);
     */
    setMonitoringPortNote(input: SetMonitoringPortNoteRequest, options?: RpcOptions): UnaryCall<SetMonitoringPortNoteRequest, SetMonitoringPortNoteResponse>;
    /**
     * @generated from protobuf rpc: StartBaselineSetup(fibertest30.measurement.StartBaselineSetupRequest) returns (fibertest30.measurement.StartBaselineSetupResponse);
     */
    startBaselineSetup(input: StartBaselineSetupRequest, options?: RpcOptions): UnaryCall<StartBaselineSetupRequest, StartBaselineSetupResponse>;
    /**
     * @generated from protobuf rpc: StopBaselineSetup(fibertest30.measurement.StopBaselineSetupRequest) returns (fibertest30.measurement.StopBaselineSetupResponse);
     */
    stopBaselineSetup(input: StopBaselineSetupRequest, options?: RpcOptions): UnaryCall<StopBaselineSetupRequest, StopBaselineSetupResponse>;
    /**
     * @generated from protobuf rpc: GetBaselineProgressTrace(fibertest30.measurement.GetBaselineProgressTraceRequest) returns (fibertest30.measurement.GetBaselineProgressTraceResponse);
     */
    getBaselineProgressTrace(input: GetBaselineProgressTraceRequest, options?: RpcOptions): UnaryCall<GetBaselineProgressTraceRequest, GetBaselineProgressTraceResponse>;
    /**
     * @generated from protobuf rpc: UpdateNotificationSettings(fibertest30.measurement.UpdateNotificationSettingsRequest) returns (fibertest30.measurement.UpdateNotificationSettingsResponse);
     */
    updateNotificationSettings(input: UpdateNotificationSettingsRequest, options?: RpcOptions): UnaryCall<UpdateNotificationSettingsRequest, UpdateNotificationSettingsResponse>;
    /**
     * @generated from protobuf rpc: GetNotificationSettings(fibertest30.measurement.GetNotificationSettingsRequest) returns (fibertest30.measurement.GetNotificationSettingsResponse);
     */
    getNotificationSettings(input: GetNotificationSettingsRequest, options?: RpcOptions): UnaryCall<GetNotificationSettingsRequest, GetNotificationSettingsResponse>;
    /**
     * @generated from protobuf rpc: TestEmailServerSettings(fibertest30.measurement.TestEmailServerSettingsRequest) returns (fibertest30.measurement.TestEmailServerSettingsResponse);
     */
    testEmailServerSettings(input: TestEmailServerSettingsRequest, options?: RpcOptions): UnaryCall<TestEmailServerSettingsRequest, TestEmailServerSettingsResponse>;
    /**
     * @generated from protobuf rpc: TestTrapReceiverSettings(fibertest30.measurement.TestTrapReceiverSettingsRequest) returns (fibertest30.measurement.TestTrapReceiverSettingsResponse);
     */
    testTrapReceiverSettings(input: TestTrapReceiverSettingsRequest, options?: RpcOptions): UnaryCall<TestTrapReceiverSettingsRequest, TestTrapReceiverSettingsResponse>;
    /**
     * @generated from protobuf rpc: GetNetworkSettings(fibertest30.measurement.GetNetworkSettingsRequest) returns (fibertest30.measurement.GetNetworkSettingsResponse);
     */
    getNetworkSettings(input: GetNetworkSettingsRequest, options?: RpcOptions): UnaryCall<GetNetworkSettingsRequest, GetNetworkSettingsResponse>;
    /**
     * @generated from protobuf rpc: UpdateNetworkSettings(fibertest30.measurement.UpdateNetworkSettingsRequest) returns (fibertest30.measurement.UpdateNetworkSettingsResponse);
     */
    updateNetworkSettings(input: UpdateNetworkSettingsRequest, options?: RpcOptions): UnaryCall<UpdateNetworkSettingsRequest, UpdateNetworkSettingsResponse>;
    /**
     * @generated from protobuf rpc: GetTimeSettings(fibertest30.measurement.GetTimeSettingsRequest) returns (fibertest30.measurement.GetTimeSettingsResponse);
     */
    getTimeSettings(input: GetTimeSettingsRequest, options?: RpcOptions): UnaryCall<GetTimeSettingsRequest, GetTimeSettingsResponse>;
    /**
     * @generated from protobuf rpc: UpdateTimeSettings(fibertest30.measurement.UpdateTimeSettingsRequest) returns (fibertest30.measurement.UpdateTimeSettingsResponse);
     */
    updateTimeSettings(input: UpdateTimeSettingsRequest, options?: RpcOptions): UnaryCall<UpdateTimeSettingsRequest, UpdateTimeSettingsResponse>;
}
/**
 * @generated from protobuf service fibertest30.measurement.Measurement
 */
export class MeasurementClient implements IMeasurementClient, ServiceInfo {
    typeName = Measurement.typeName;
    methods = Measurement.methods;
    options = Measurement.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: GetSorSample(fibertest30.measurement.GetSorSampleRequest) returns (fibertest30.measurement.GetSorSampleResponse);
     */
    getSorSample(input: GetSorSampleRequest, options?: RpcOptions): UnaryCall<GetSorSampleRequest, GetSorSampleResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetSorSampleRequest, GetSorSampleResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SetMonitoringPortStatus(fibertest30.measurement.SetMonitoringPortStatusRequest) returns (fibertest30.measurement.SetMonitoringPortStatusResponse);
     */
    setMonitoringPortStatus(input: SetMonitoringPortStatusRequest, options?: RpcOptions): UnaryCall<SetMonitoringPortStatusRequest, SetMonitoringPortStatusResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<SetMonitoringPortStatusRequest, SetMonitoringPortStatusResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetMonitoringPort(fibertest30.measurement.GetMonitoringPortRequest) returns (fibertest30.measurement.GetMonitoringPortResponse);
     */
    getMonitoringPort(input: GetMonitoringPortRequest, options?: RpcOptions): UnaryCall<GetMonitoringPortRequest, GetMonitoringPortResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetMonitoringPortRequest, GetMonitoringPortResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetOtauMonitoringPorts(fibertest30.measurement.GetOtauMonitoringPortsRequest) returns (fibertest30.measurement.GetOtauMonitoringPortsResponse);
     */
    getOtauMonitoringPorts(input: GetOtauMonitoringPortsRequest, options?: RpcOptions): UnaryCall<GetOtauMonitoringPortsRequest, GetOtauMonitoringPortsResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetOtauMonitoringPortsRequest, GetOtauMonitoringPortsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SetMonitoringPortSchedule(fibertest30.measurement.SetMonitoringPortScheduleRequest) returns (fibertest30.measurement.SetMonitoringPortScheduleResponse);
     */
    setMonitoringPortSchedule(input: SetMonitoringPortScheduleRequest, options?: RpcOptions): UnaryCall<SetMonitoringPortScheduleRequest, SetMonitoringPortScheduleResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<SetMonitoringPortScheduleRequest, SetMonitoringPortScheduleResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Sets text note for a specific monitoring port.
     *
     * @generated from protobuf rpc: SetMonitoringPortNote(fibertest30.measurement.SetMonitoringPortNoteRequest) returns (fibertest30.measurement.SetMonitoringPortNoteResponse);
     */
    setMonitoringPortNote(input: SetMonitoringPortNoteRequest, options?: RpcOptions): UnaryCall<SetMonitoringPortNoteRequest, SetMonitoringPortNoteResponse> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<SetMonitoringPortNoteRequest, SetMonitoringPortNoteResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: StartBaselineSetup(fibertest30.measurement.StartBaselineSetupRequest) returns (fibertest30.measurement.StartBaselineSetupResponse);
     */
    startBaselineSetup(input: StartBaselineSetupRequest, options?: RpcOptions): UnaryCall<StartBaselineSetupRequest, StartBaselineSetupResponse> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<StartBaselineSetupRequest, StartBaselineSetupResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: StopBaselineSetup(fibertest30.measurement.StopBaselineSetupRequest) returns (fibertest30.measurement.StopBaselineSetupResponse);
     */
    stopBaselineSetup(input: StopBaselineSetupRequest, options?: RpcOptions): UnaryCall<StopBaselineSetupRequest, StopBaselineSetupResponse> {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept<StopBaselineSetupRequest, StopBaselineSetupResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetBaselineProgressTrace(fibertest30.measurement.GetBaselineProgressTraceRequest) returns (fibertest30.measurement.GetBaselineProgressTraceResponse);
     */
    getBaselineProgressTrace(input: GetBaselineProgressTraceRequest, options?: RpcOptions): UnaryCall<GetBaselineProgressTraceRequest, GetBaselineProgressTraceResponse> {
        const method = this.methods[8], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetBaselineProgressTraceRequest, GetBaselineProgressTraceResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpdateNotificationSettings(fibertest30.measurement.UpdateNotificationSettingsRequest) returns (fibertest30.measurement.UpdateNotificationSettingsResponse);
     */
    updateNotificationSettings(input: UpdateNotificationSettingsRequest, options?: RpcOptions): UnaryCall<UpdateNotificationSettingsRequest, UpdateNotificationSettingsResponse> {
        const method = this.methods[9], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateNotificationSettingsRequest, UpdateNotificationSettingsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetNotificationSettings(fibertest30.measurement.GetNotificationSettingsRequest) returns (fibertest30.measurement.GetNotificationSettingsResponse);
     */
    getNotificationSettings(input: GetNotificationSettingsRequest, options?: RpcOptions): UnaryCall<GetNotificationSettingsRequest, GetNotificationSettingsResponse> {
        const method = this.methods[10], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetNotificationSettingsRequest, GetNotificationSettingsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: TestEmailServerSettings(fibertest30.measurement.TestEmailServerSettingsRequest) returns (fibertest30.measurement.TestEmailServerSettingsResponse);
     */
    testEmailServerSettings(input: TestEmailServerSettingsRequest, options?: RpcOptions): UnaryCall<TestEmailServerSettingsRequest, TestEmailServerSettingsResponse> {
        const method = this.methods[11], opt = this._transport.mergeOptions(options);
        return stackIntercept<TestEmailServerSettingsRequest, TestEmailServerSettingsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: TestTrapReceiverSettings(fibertest30.measurement.TestTrapReceiverSettingsRequest) returns (fibertest30.measurement.TestTrapReceiverSettingsResponse);
     */
    testTrapReceiverSettings(input: TestTrapReceiverSettingsRequest, options?: RpcOptions): UnaryCall<TestTrapReceiverSettingsRequest, TestTrapReceiverSettingsResponse> {
        const method = this.methods[12], opt = this._transport.mergeOptions(options);
        return stackIntercept<TestTrapReceiverSettingsRequest, TestTrapReceiverSettingsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetNetworkSettings(fibertest30.measurement.GetNetworkSettingsRequest) returns (fibertest30.measurement.GetNetworkSettingsResponse);
     */
    getNetworkSettings(input: GetNetworkSettingsRequest, options?: RpcOptions): UnaryCall<GetNetworkSettingsRequest, GetNetworkSettingsResponse> {
        const method = this.methods[13], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetNetworkSettingsRequest, GetNetworkSettingsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpdateNetworkSettings(fibertest30.measurement.UpdateNetworkSettingsRequest) returns (fibertest30.measurement.UpdateNetworkSettingsResponse);
     */
    updateNetworkSettings(input: UpdateNetworkSettingsRequest, options?: RpcOptions): UnaryCall<UpdateNetworkSettingsRequest, UpdateNetworkSettingsResponse> {
        const method = this.methods[14], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateNetworkSettingsRequest, UpdateNetworkSettingsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetTimeSettings(fibertest30.measurement.GetTimeSettingsRequest) returns (fibertest30.measurement.GetTimeSettingsResponse);
     */
    getTimeSettings(input: GetTimeSettingsRequest, options?: RpcOptions): UnaryCall<GetTimeSettingsRequest, GetTimeSettingsResponse> {
        const method = this.methods[15], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetTimeSettingsRequest, GetTimeSettingsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpdateTimeSettings(fibertest30.measurement.UpdateTimeSettingsRequest) returns (fibertest30.measurement.UpdateTimeSettingsResponse);
     */
    updateTimeSettings(input: UpdateTimeSettingsRequest, options?: RpcOptions): UnaryCall<UpdateTimeSettingsRequest, UpdateTimeSettingsResponse> {
        const method = this.methods[16], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateTimeSettingsRequest, UpdateTimeSettingsResponse>("unary", this._transport, method, opt, input);
    }
}
