// @generated by protobuf-ts 2.9.4 with parameter long_type_string,optimize_code_size
// @generated from protobuf file "port_labeling.proto" (package "fibertest30.port_labeling", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * Defines a port label with its associated details and linked monitoring ports.
 *
 * @generated from protobuf message fibertest30.port_labeling.PortLabel
 */
export interface PortLabel {
    /**
     * @generated from protobuf field: int32 id = 1;
     */
    id: number; // ID of the port label.
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string; // Name of the port label.
    /**
     * @generated from protobuf field: string hexColor = 3;
     */
    hexColor: string; // Hex color for the port label.
    /**
     * @generated from protobuf field: repeated int32 monitoringPortIds = 4;
     */
    monitoringPortIds: number[]; // List of monitoring port IDs to which this label is attached.
}
/**
 * @generated from protobuf message fibertest30.port_labeling.GetPortLabelsRequest
 */
export interface GetPortLabelsRequest {
}
/**
 * @generated from protobuf message fibertest30.port_labeling.GetPortLabelsResponse
 */
export interface GetPortLabelsResponse {
    /**
     * @generated from protobuf field: repeated fibertest30.port_labeling.PortLabel portLabels = 1;
     */
    portLabels: PortLabel[]; // List of port labels.
}
/**
 * @generated from protobuf message fibertest30.port_labeling.AddAndAttachPortLabelRequest
 */
export interface AddAndAttachPortLabelRequest {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string; // Name of the port label. 
    /**
     * @generated from protobuf field: string hexColor = 2;
     */
    hexColor: string; // Hex color for the port label.
    /**
     * @generated from protobuf field: int32 monitoringPortId = 3;
     */
    monitoringPortId: number; // Monitoring port ID to attach the new port label to.
}
/**
 *
 * Server sends SystemEventType.PortLabelAttached event with PortLabelAttachedData via server streaming.
 * "PortLabelAttachedData": {
 * "PortLabel": {
 * "Id": "int",
 * "Name": "string",
 * "HexColor": "string"
 * },
 * "MonitoringPortId": "int"
 * }
 *
 * @generated from protobuf message fibertest30.port_labeling.AddAndAttachPortLabelResponse
 */
export interface AddAndAttachPortLabelResponse {
}
/**
 * @generated from protobuf message fibertest30.port_labeling.UpdatePortLabelRequest
 */
export interface UpdatePortLabelRequest {
    /**
     * @generated from protobuf field: int32 portLabelId = 1;
     */
    portLabelId: number; // ID of the port label to update.
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string; // New name for the port label.
    /**
     * @generated from protobuf field: string hexColor = 3;
     */
    hexColor: string; // New hex color for the port label. 
}
/**
 *
 * Server sends SystemEventType.PortLabelUpdated event with PortLabelUpdatedData via server streaming.
 * "PortLabelUpdatedData": {
 * "OldPortLabel": {
 * "Id": "int",
 * "Name": "string",
 * "HexColor": "string"
 * },
 * "NewPortLabel": {
 * "Id": "int",
 * "Name": "string",
 * "HexColor": "string"
 * }
 * }
 *
 * @generated from protobuf message fibertest30.port_labeling.UpdatePortLabelResponse
 */
export interface UpdatePortLabelResponse {
}
/**
 * @generated from protobuf message fibertest30.port_labeling.AttachPortLabelRequest
 */
export interface AttachPortLabelRequest {
    /**
     * @generated from protobuf field: int32 portLabelId = 1;
     */
    portLabelId: number; // ID of the port label to attach.
    /**
     * @generated from protobuf field: int32 monitoringPortId = 2;
     */
    monitoringPortId: number; // Monitoring port ID where the port label should be attached.
}
/**
 *
 * Server sends SystemEventType.PortLabelAttached event with PortLabelAttachedData via server streaming.
 * "PortLabelAttachedData": {
 * "PortLabel": {
 * "Id": "int",
 * "Name": "string",
 * "HexColor": "string"
 * },
 * "MonitoringPortId": "int"
 * }
 *
 * @generated from protobuf message fibertest30.port_labeling.AttachPortLabelResponse
 */
export interface AttachPortLabelResponse {
}
/**
 * @generated from protobuf message fibertest30.port_labeling.DetachPortLabelAndRemoveIfLastRequest
 */
export interface DetachPortLabelAndRemoveIfLastRequest {
    /**
     * @generated from protobuf field: int32 portLabelId = 1;
     */
    portLabelId: number; // ID of the port label to detach.
    /**
     * @generated from protobuf field: int32 monitoringPortId = 2;
     */
    monitoringPortId: number; // Monitoring port ID from which to detach the port label.
}
/**
 *
 * Server sends SystemEventType.PortLabelDetached event with PortLabelDetachedData via server streaming.
 * "PortLabelDetachedData": {
 * "PortLabel": {
 * "Id": "int",
 * "Name": "string",
 * "HexColor": "string"
 * },
 * "MonitoringPortId": "int"
 * }
 *
 * @generated from protobuf message fibertest30.port_labeling.DetachPortLabelAndRemoveIfLastResponse
 */
export interface DetachPortLabelAndRemoveIfLastResponse {
}
// @generated message type with reflection information, may provide speed optimized methods
class PortLabel$Type extends MessageType<PortLabel> {
    constructor() {
        super("fibertest30.port_labeling.PortLabel", [
            { no: 1, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "hexColor", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "monitoringPortIds", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message fibertest30.port_labeling.PortLabel
 */
export const PortLabel = new PortLabel$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetPortLabelsRequest$Type extends MessageType<GetPortLabelsRequest> {
    constructor() {
        super("fibertest30.port_labeling.GetPortLabelsRequest", []);
    }
}
/**
 * @generated MessageType for protobuf message fibertest30.port_labeling.GetPortLabelsRequest
 */
export const GetPortLabelsRequest = new GetPortLabelsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetPortLabelsResponse$Type extends MessageType<GetPortLabelsResponse> {
    constructor() {
        super("fibertest30.port_labeling.GetPortLabelsResponse", [
            { no: 1, name: "portLabels", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PortLabel }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message fibertest30.port_labeling.GetPortLabelsResponse
 */
export const GetPortLabelsResponse = new GetPortLabelsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AddAndAttachPortLabelRequest$Type extends MessageType<AddAndAttachPortLabelRequest> {
    constructor() {
        super("fibertest30.port_labeling.AddAndAttachPortLabelRequest", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "hexColor", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "monitoringPortId", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message fibertest30.port_labeling.AddAndAttachPortLabelRequest
 */
export const AddAndAttachPortLabelRequest = new AddAndAttachPortLabelRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AddAndAttachPortLabelResponse$Type extends MessageType<AddAndAttachPortLabelResponse> {
    constructor() {
        super("fibertest30.port_labeling.AddAndAttachPortLabelResponse", []);
    }
}
/**
 * @generated MessageType for protobuf message fibertest30.port_labeling.AddAndAttachPortLabelResponse
 */
export const AddAndAttachPortLabelResponse = new AddAndAttachPortLabelResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdatePortLabelRequest$Type extends MessageType<UpdatePortLabelRequest> {
    constructor() {
        super("fibertest30.port_labeling.UpdatePortLabelRequest", [
            { no: 1, name: "portLabelId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "hexColor", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message fibertest30.port_labeling.UpdatePortLabelRequest
 */
export const UpdatePortLabelRequest = new UpdatePortLabelRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdatePortLabelResponse$Type extends MessageType<UpdatePortLabelResponse> {
    constructor() {
        super("fibertest30.port_labeling.UpdatePortLabelResponse", []);
    }
}
/**
 * @generated MessageType for protobuf message fibertest30.port_labeling.UpdatePortLabelResponse
 */
export const UpdatePortLabelResponse = new UpdatePortLabelResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AttachPortLabelRequest$Type extends MessageType<AttachPortLabelRequest> {
    constructor() {
        super("fibertest30.port_labeling.AttachPortLabelRequest", [
            { no: 1, name: "portLabelId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "monitoringPortId", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message fibertest30.port_labeling.AttachPortLabelRequest
 */
export const AttachPortLabelRequest = new AttachPortLabelRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AttachPortLabelResponse$Type extends MessageType<AttachPortLabelResponse> {
    constructor() {
        super("fibertest30.port_labeling.AttachPortLabelResponse", []);
    }
}
/**
 * @generated MessageType for protobuf message fibertest30.port_labeling.AttachPortLabelResponse
 */
export const AttachPortLabelResponse = new AttachPortLabelResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DetachPortLabelAndRemoveIfLastRequest$Type extends MessageType<DetachPortLabelAndRemoveIfLastRequest> {
    constructor() {
        super("fibertest30.port_labeling.DetachPortLabelAndRemoveIfLastRequest", [
            { no: 1, name: "portLabelId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "monitoringPortId", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message fibertest30.port_labeling.DetachPortLabelAndRemoveIfLastRequest
 */
export const DetachPortLabelAndRemoveIfLastRequest = new DetachPortLabelAndRemoveIfLastRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DetachPortLabelAndRemoveIfLastResponse$Type extends MessageType<DetachPortLabelAndRemoveIfLastResponse> {
    constructor() {
        super("fibertest30.port_labeling.DetachPortLabelAndRemoveIfLastResponse", []);
    }
}
/**
 * @generated MessageType for protobuf message fibertest30.port_labeling.DetachPortLabelAndRemoveIfLastResponse
 */
export const DetachPortLabelAndRemoveIfLastResponse = new DetachPortLabelAndRemoveIfLastResponse$Type();
/**
 * @generated ServiceType for protobuf service fibertest30.port_labeling.PortLabeling
 */
export const PortLabeling = new ServiceType("fibertest30.port_labeling.PortLabeling", [
    { name: "GetPortLabels", options: {}, I: GetPortLabelsRequest, O: GetPortLabelsResponse },
    { name: "AddAndAttachPortLabel", options: {}, I: AddAndAttachPortLabelRequest, O: AddAndAttachPortLabelResponse },
    { name: "UpdatePortLabel", options: {}, I: UpdatePortLabelRequest, O: UpdatePortLabelResponse },
    { name: "AttachPortLabel", options: {}, I: AttachPortLabelRequest, O: AttachPortLabelResponse },
    { name: "DetachPortLabelAndRemoveIfLast", options: {}, I: DetachPortLabelAndRemoveIfLastRequest, O: DetachPortLabelAndRemoveIfLastResponse }
]);
