// @generated by protobuf-ts 2.9.4 with parameter long_type_string,optimize_code_size
// @generated from protobuf file "gis.proto" (package "fibertest30.gis", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Gis } from "./gis";
import type { GetGraphRoutesResponse } from "./gis";
import type { GetGraphRoutesRequest } from "./gis";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { GetTraceRouteResponse } from "./gis";
import type { GetTraceRouteRequest } from "./gis";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service fibertest30.gis.Gis
 */
export interface IGisClient {
    /**
     * @generated from protobuf rpc: GetTraceRoute(fibertest30.gis.GetTraceRouteRequest) returns (fibertest30.gis.GetTraceRouteResponse);
     */
    getTraceRoute(input: GetTraceRouteRequest, options?: RpcOptions): UnaryCall<GetTraceRouteRequest, GetTraceRouteResponse>;
    /**
     * @generated from protobuf rpc: GetGraphRoutes(fibertest30.gis.GetGraphRoutesRequest) returns (fibertest30.gis.GetGraphRoutesResponse);
     */
    getGraphRoutes(input: GetGraphRoutesRequest, options?: RpcOptions): UnaryCall<GetGraphRoutesRequest, GetGraphRoutesResponse>;
}
/**
 * @generated from protobuf service fibertest30.gis.Gis
 */
export class GisClient implements IGisClient, ServiceInfo {
    typeName = Gis.typeName;
    methods = Gis.methods;
    options = Gis.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: GetTraceRoute(fibertest30.gis.GetTraceRouteRequest) returns (fibertest30.gis.GetTraceRouteResponse);
     */
    getTraceRoute(input: GetTraceRouteRequest, options?: RpcOptions): UnaryCall<GetTraceRouteRequest, GetTraceRouteResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetTraceRouteRequest, GetTraceRouteResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetGraphRoutes(fibertest30.gis.GetGraphRoutesRequest) returns (fibertest30.gis.GetGraphRoutesResponse);
     */
    getGraphRoutes(input: GetGraphRoutesRequest, options?: RpcOptions): UnaryCall<GetGraphRoutesRequest, GetGraphRoutesResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetGraphRoutesRequest, GetGraphRoutesResponse>("unary", this._transport, method, opt, input);
    }
}
