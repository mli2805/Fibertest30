// @generated by protobuf-ts 2.9.4 with parameter long_type_string,optimize_code_size
// @generated from protobuf file "rtu_tree.proto" (package "fibertest30.rtu_tree", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { MessageType } from "@protobuf-ts/runtime";
import { MonitoringState } from "./ft.enums";
import { RtuPartState } from "./ft.enums";
import { RtuMaker } from "./ft.enums";
import { TceLinkState } from "./ft.enums";
import { FiberState } from "./ft.enums";
/**
 * @generated from protobuf message fibertest30.rtu_tree.NetAddress
 */
export interface NetAddress {
    /**
     * @generated from protobuf field: string ip4Address = 1;
     */
    ip4Address: string;
    /**
     * @generated from protobuf field: string hostName = 2;
     */
    hostName: string;
    /**
     * @generated from protobuf field: int32 port = 3;
     */
    port: number;
}
/**
 * @generated from protobuf message fibertest30.rtu_tree.LeafOfAcceptableMeasParams
 */
export interface LeafOfAcceptableMeasParams {
    /**
     * @generated from protobuf field: repeated string resolutions = 1;
     */
    resolutions: string[];
    /**
     * @generated from protobuf field: repeated string pulseDurations = 2;
     */
    pulseDurations: string[];
    /**
     * @generated from protobuf field: repeated string periodsToAverage = 3;
     */
    periodsToAverage: string[];
    /**
     * @generated from protobuf field: repeated string measCountsToAverage = 4;
     */
    measCountsToAverage: string[];
}
/**
 * @generated from protobuf message fibertest30.rtu_tree.DistanceMeasParam
 */
export interface DistanceMeasParam {
    /**
     * @generated from protobuf field: string distance = 1;
     */
    distance: string;
    /**
     * @generated from protobuf field: fibertest30.rtu_tree.LeafOfAcceptableMeasParams otherParams = 2;
     */
    otherParams?: LeafOfAcceptableMeasParams;
}
/**
 * @generated from protobuf message fibertest30.rtu_tree.BranchOfAcceptableMeasParams
 */
export interface BranchOfAcceptableMeasParams {
    /**
     * @generated from protobuf field: repeated fibertest30.rtu_tree.DistanceMeasParam distances = 1;
     */
    distances: DistanceMeasParam[];
    /**
     * @generated from protobuf field: double backscatterCoeff = 2;
     */
    backscatterCoeff: number;
    /**
     * @generated from protobuf field: double refractiveIndex = 3;
     */
    refractiveIndex: number;
}
/**
 * @generated from protobuf message fibertest30.rtu_tree.UnitMeasParam
 */
export interface UnitMeasParam {
    /**
     * @generated from protobuf field: string unit = 1;
     */
    unit: string;
    /**
     * @generated from protobuf field: fibertest30.rtu_tree.BranchOfAcceptableMeasParams branch = 2;
     */
    branch?: BranchOfAcceptableMeasParams;
}
/**
 * @generated from protobuf message fibertest30.rtu_tree.TreeOfAcceptableMeasParams
 */
export interface TreeOfAcceptableMeasParams {
    /**
     * @generated from protobuf field: repeated fibertest30.rtu_tree.UnitMeasParam units = 1;
     */
    units: UnitMeasParam[];
}
/**
 * @generated from protobuf message fibertest30.rtu_tree.MeasurementSettingsStrings
 */
export interface MeasurementSettingsStrings {
    /**
     * @generated from protobuf field: string laser = 1;
     */
    laser: string;
    /**
     * @generated from protobuf field: string backscatterCoeff = 2;
     */
    backscatterCoeff: string;
    /**
     * @generated from protobuf field: string refractiveIndex = 3;
     */
    refractiveIndex: string;
    /**
     * @generated from protobuf field: string distance = 4;
     */
    distance: string;
    /**
     * @generated from protobuf field: string pulse = 5;
     */
    pulse: string;
    /**
     * @generated from protobuf field: string resolution = 6;
     */
    resolution: string;
    /**
     * @generated from protobuf field: string averagingTime = 7;
     */
    averagingTime: string;
}
/**
 * @generated from protobuf message fibertest30.rtu_tree.PortOfOtau
 */
export interface PortOfOtau {
    /**
     * @generated from protobuf field: optional string otauId = 1;
     */
    otauId?: string; // main MAK-100 OTAU has no ID, but BOP has its ID
    /**
     * @generated from protobuf field: optional fibertest30.rtu_tree.NetAddress otauNetAddress = 2;
     */
    otauNetAddress?: NetAddress; // only for BOP
    /**
     * @generated from protobuf field: string otauSerial = 3;
     */
    otauSerial: string;
    /**
     * @generated from protobuf field: int32 opticalPort = 4;
     */
    opticalPort: number;
    /**
     * @generated from protobuf field: bool isPortOnMainCharon = 5;
     */
    isPortOnMainCharon: boolean;
    /**
     * @generated from protobuf field: optional int32 mainCharonPort = 6;
     */
    mainCharonPort?: number; // only for BOP
}
/**
 * @generated from protobuf message fibertest30.rtu_tree.Trace
 */
export interface Trace {
    /**
     * @generated from protobuf field: string traceId = 1;
     */
    traceId: string;
    /**
     * @generated from protobuf field: string rtuId = 2;
     */
    rtuId: string;
    /**
     * @generated from protobuf field: string title = 3;
     */
    title: string;
    /**
     * @generated from protobuf field: optional fibertest30.rtu_tree.PortOfOtau port = 4;
     */
    port?: PortOfOtau; // there is no PortOfOtau if trace is detached
    /**
     * @generated from protobuf field: bool isAttached = 5;
     */
    isAttached: boolean;
    /**
     * @generated from protobuf field: fibertest30.ft.enums.FiberState state = 6;
     */
    state: FiberState;
    /**
     * @generated from protobuf field: bool hasEnoughBaseRefsToPerformMonitoring = 7;
     */
    hasEnoughBaseRefsToPerformMonitoring: boolean;
    /**
     * @generated from protobuf field: bool isIncludedInMonitoringCycle = 8;
     */
    isIncludedInMonitoringCycle: boolean;
    /**
     * @generated from protobuf field: fibertest30.ft.enums.TceLinkState tceLinkState = 9;
     */
    tceLinkState: TceLinkState;
    /**
     * @generated from protobuf field: int32 fastDuration = 10;
     */
    fastDuration: number;
    /**
     * @generated from protobuf field: int32 preciseDuration = 11;
     */
    preciseDuration: number;
    /**
     * @generated from protobuf field: int32 additionalDuration = 12;
     */
    additionalDuration: number;
    /**
     * @generated from protobuf field: int32 preciseSorId = 13;
     */
    preciseSorId: number;
    /**
     * @generated from protobuf field: int32 fastSorId = 14;
     */
    fastSorId: number;
    /**
     * @generated from protobuf field: int32 additionalSorId = 15;
     */
    additionalSorId: number;
    /**
     * @generated from protobuf field: optional string comment = 16;
     */
    comment?: string;
}
/**
 * @generated from protobuf message fibertest30.rtu_tree.Bop
 */
export interface Bop {
    /**
     * @generated from protobuf field: string bopId = 1;
     */
    bopId: string;
    /**
     * @generated from protobuf field: string rtuId = 2;
     */
    rtuId: string;
    /**
     * @generated from protobuf field: fibertest30.rtu_tree.NetAddress bopNetAddress = 3;
     */
    bopNetAddress?: NetAddress;
    /**
     * @generated from protobuf field: int32 masterPort = 4;
     */
    masterPort: number;
    /**
     * @generated from protobuf field: bool isOk = 5;
     */
    isOk: boolean;
    /**
     * @generated from protobuf field: string serial = 6;
     */
    serial: string;
    /**
     * @generated from protobuf field: int32 portCount = 7;
     */
    portCount: number;
    /**
     * @generated from protobuf field: repeated fibertest30.rtu_tree.Trace traces = 8;
     */
    traces: Trace[];
}
/**
 * @generated from protobuf message fibertest30.rtu_tree.Rtu
 */
export interface Rtu {
    /**
     * @generated from protobuf field: string rtuId = 1;
     */
    rtuId: string;
    /**
     * @generated from protobuf field: fibertest30.ft.enums.RtuMaker rtuMaker = 2;
     */
    rtuMaker: RtuMaker;
    /**
     * @generated from protobuf field: string title = 3;
     */
    title: string;
    /**
     * @generated from protobuf field: optional string mfid = 4;
     */
    mfid?: string;
    /**
     * @generated from protobuf field: optional string mfsn = 5;
     */
    mfsn?: string;
    /**
     * @generated from protobuf field: optional string omid = 6;
     */
    omid?: string;
    /**
     * @generated from protobuf field: optional string omsn = 7;
     */
    omsn?: string;
    /**
     * @generated from protobuf field: optional string serial = 8;
     */
    serial?: string;
    /**
     * @generated from protobuf field: int32 ownPortCount = 9;
     */
    ownPortCount: number;
    /**
     * @generated from protobuf field: int32 fullPortCount = 10;
     */
    fullPortCount: number;
    /**
     * @generated from protobuf field: fibertest30.rtu_tree.NetAddress mainChannel = 11;
     */
    mainChannel?: NetAddress;
    /**
     * @generated from protobuf field: fibertest30.ft.enums.RtuPartState mainChannelState = 12;
     */
    mainChannelState: RtuPartState;
    /**
     * @generated from protobuf field: fibertest30.rtu_tree.NetAddress reserveChannel = 13;
     */
    reserveChannel?: NetAddress;
    /**
     * @generated from protobuf field: fibertest30.ft.enums.RtuPartState reserveChannelState = 14;
     */
    reserveChannelState: RtuPartState;
    /**
     * @generated from protobuf field: bool isReserveChannelSet = 15;
     */
    isReserveChannelSet: boolean;
    /**
     * @generated from protobuf field: fibertest30.rtu_tree.NetAddress otdrNetAddress = 16;
     */
    otdrNetAddress?: NetAddress;
    /**
     * @generated from protobuf field: fibertest30.ft.enums.MonitoringState monitoringMode = 17;
     */
    monitoringMode: MonitoringState;
    /**
     * @generated from protobuf field: int32 preciseMeas = 18;
     */
    preciseMeas: number;
    /**
     * @generated from protobuf field: int32 preciseSave = 19;
     */
    preciseSave: number;
    /**
     * @generated from protobuf field: int32 fastSave = 20;
     */
    fastSave: number;
    /**
     * @generated from protobuf field: optional string version = 21;
     */
    version?: string;
    /**
     * @generated from protobuf field: optional string version2 = 22;
     */
    version2?: string;
    /**
     * @generated from protobuf field: repeated fibertest30.rtu_tree.Bop bops = 23;
     */
    bops: Bop[];
    /**
     * @generated from protobuf field: repeated fibertest30.rtu_tree.Trace traces = 24;
     */
    traces: Trace[];
    /**
     * @generated from protobuf field: optional fibertest30.rtu_tree.TreeOfAcceptableMeasParams treeOfAcceptableMeasParams = 25;
     */
    treeOfAcceptableMeasParams?: TreeOfAcceptableMeasParams;
    /**
     * @generated from protobuf field: optional string comment = 26;
     */
    comment?: string;
}
/**
 * @generated from protobuf message fibertest30.rtu_tree.GetRtuTreeRequest
 */
export interface GetRtuTreeRequest {
}
/**
 * @generated from protobuf message fibertest30.rtu_tree.GetRtuTreeResponse
 */
export interface GetRtuTreeResponse {
    /**
     * @generated from protobuf field: repeated fibertest30.rtu_tree.Rtu rtus = 1;
     */
    rtus: Rtu[];
}
/**
 * @generated from protobuf message fibertest30.rtu_tree.GetRtuRequest
 */
export interface GetRtuRequest {
    /**
     * @generated from protobuf field: string rtuId = 1;
     */
    rtuId: string;
}
/**
 * @generated from protobuf message fibertest30.rtu_tree.GetRtuResponse
 */
export interface GetRtuResponse {
    /**
     * @generated from protobuf field: fibertest30.rtu_tree.Rtu rtu = 1;
     */
    rtu?: Rtu;
}
/**
 * @generated from protobuf message fibertest30.rtu_tree.AttachTraceRequest
 */
export interface AttachTraceRequest {
    /**
     * @generated from protobuf field: string traceId = 1;
     */
    traceId: string;
    /**
     * @generated from protobuf field: repeated fibertest30.rtu_tree.PortOfOtau portOfOtau = 2;
     */
    portOfOtau: PortOfOtau[];
}
/**
 * @generated from protobuf message fibertest30.rtu_tree.AttachTraceResponse
 */
export interface AttachTraceResponse {
}
/**
 * @generated from protobuf message fibertest30.rtu_tree.DetachTraceRequest
 */
export interface DetachTraceRequest {
    /**
     * @generated from protobuf field: string traceId = 1;
     */
    traceId: string;
}
/**
 * @generated from protobuf message fibertest30.rtu_tree.DetachTraceResponse
 */
export interface DetachTraceResponse {
}
/**
 * @generated from protobuf message fibertest30.rtu_tree.AttachOtauRequest
 */
export interface AttachOtauRequest {
    /**
     * @generated from protobuf field: string rtuId = 1;
     */
    rtuId: string;
    /**
     * @generated from protobuf field: fibertest30.rtu_tree.NetAddress netAddress = 2;
     */
    netAddress?: NetAddress;
    /**
     * @generated from protobuf field: int32 opticalPort = 3;
     */
    opticalPort: number;
}
/**
 * @generated from protobuf message fibertest30.rtu_tree.AttachOtauResponse
 */
export interface AttachOtauResponse {
}
/**
 * @generated from protobuf message fibertest30.rtu_tree.DetachOtauRequest
 */
export interface DetachOtauRequest {
    /**
     * @generated from protobuf field: string rtuId = 1;
     */
    rtuId: string;
    /**
     * @generated from protobuf field: string otauId = 2;
     */
    otauId: string;
    /**
     * @generated from protobuf field: fibertest30.rtu_tree.NetAddress netAddress = 3;
     */
    netAddress?: NetAddress;
    /**
     * @generated from protobuf field: int32 opticalPort = 4;
     */
    opticalPort: number;
}
/**
 * @generated from protobuf message fibertest30.rtu_tree.DetachOtauResponse
 */
export interface DetachOtauResponse {
}
// @generated message type with reflection information, may provide speed optimized methods
class NetAddress$Type extends MessageType<NetAddress> {
    constructor() {
        super("fibertest30.rtu_tree.NetAddress", [
            { no: 1, name: "ip4Address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "hostName", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "port", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message fibertest30.rtu_tree.NetAddress
 */
export const NetAddress = new NetAddress$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LeafOfAcceptableMeasParams$Type extends MessageType<LeafOfAcceptableMeasParams> {
    constructor() {
        super("fibertest30.rtu_tree.LeafOfAcceptableMeasParams", [
            { no: 1, name: "resolutions", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "pulseDurations", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "periodsToAverage", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "measCountsToAverage", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message fibertest30.rtu_tree.LeafOfAcceptableMeasParams
 */
export const LeafOfAcceptableMeasParams = new LeafOfAcceptableMeasParams$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DistanceMeasParam$Type extends MessageType<DistanceMeasParam> {
    constructor() {
        super("fibertest30.rtu_tree.DistanceMeasParam", [
            { no: 1, name: "distance", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "otherParams", kind: "message", T: () => LeafOfAcceptableMeasParams }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message fibertest30.rtu_tree.DistanceMeasParam
 */
export const DistanceMeasParam = new DistanceMeasParam$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BranchOfAcceptableMeasParams$Type extends MessageType<BranchOfAcceptableMeasParams> {
    constructor() {
        super("fibertest30.rtu_tree.BranchOfAcceptableMeasParams", [
            { no: 1, name: "distances", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => DistanceMeasParam },
            { no: 2, name: "backscatterCoeff", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 3, name: "refractiveIndex", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message fibertest30.rtu_tree.BranchOfAcceptableMeasParams
 */
export const BranchOfAcceptableMeasParams = new BranchOfAcceptableMeasParams$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UnitMeasParam$Type extends MessageType<UnitMeasParam> {
    constructor() {
        super("fibertest30.rtu_tree.UnitMeasParam", [
            { no: 1, name: "unit", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "branch", kind: "message", T: () => BranchOfAcceptableMeasParams }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message fibertest30.rtu_tree.UnitMeasParam
 */
export const UnitMeasParam = new UnitMeasParam$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TreeOfAcceptableMeasParams$Type extends MessageType<TreeOfAcceptableMeasParams> {
    constructor() {
        super("fibertest30.rtu_tree.TreeOfAcceptableMeasParams", [
            { no: 1, name: "units", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => UnitMeasParam }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message fibertest30.rtu_tree.TreeOfAcceptableMeasParams
 */
export const TreeOfAcceptableMeasParams = new TreeOfAcceptableMeasParams$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MeasurementSettingsStrings$Type extends MessageType<MeasurementSettingsStrings> {
    constructor() {
        super("fibertest30.rtu_tree.MeasurementSettingsStrings", [
            { no: 1, name: "laser", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "backscatterCoeff", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "refractiveIndex", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "distance", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "pulse", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "resolution", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "averagingTime", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message fibertest30.rtu_tree.MeasurementSettingsStrings
 */
export const MeasurementSettingsStrings = new MeasurementSettingsStrings$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PortOfOtau$Type extends MessageType<PortOfOtau> {
    constructor() {
        super("fibertest30.rtu_tree.PortOfOtau", [
            { no: 1, name: "otauId", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "otauNetAddress", kind: "message", T: () => NetAddress },
            { no: 3, name: "otauSerial", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "opticalPort", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "isPortOnMainCharon", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "mainCharonPort", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message fibertest30.rtu_tree.PortOfOtau
 */
export const PortOfOtau = new PortOfOtau$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Trace$Type extends MessageType<Trace> {
    constructor() {
        super("fibertest30.rtu_tree.Trace", [
            { no: 1, name: "traceId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "rtuId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "port", kind: "message", T: () => PortOfOtau },
            { no: 5, name: "isAttached", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "state", kind: "enum", T: () => ["fibertest30.ft.enums.FiberState", FiberState] },
            { no: 7, name: "hasEnoughBaseRefsToPerformMonitoring", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "isIncludedInMonitoringCycle", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "tceLinkState", kind: "enum", T: () => ["fibertest30.ft.enums.TceLinkState", TceLinkState] },
            { no: 10, name: "fastDuration", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 11, name: "preciseDuration", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 12, name: "additionalDuration", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 13, name: "preciseSorId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 14, name: "fastSorId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 15, name: "additionalSorId", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 16, name: "comment", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message fibertest30.rtu_tree.Trace
 */
export const Trace = new Trace$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Bop$Type extends MessageType<Bop> {
    constructor() {
        super("fibertest30.rtu_tree.Bop", [
            { no: 1, name: "bopId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "rtuId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "bopNetAddress", kind: "message", T: () => NetAddress },
            { no: 4, name: "masterPort", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "isOk", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "serial", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "portCount", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "traces", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Trace }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message fibertest30.rtu_tree.Bop
 */
export const Bop = new Bop$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Rtu$Type extends MessageType<Rtu> {
    constructor() {
        super("fibertest30.rtu_tree.Rtu", [
            { no: 1, name: "rtuId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "rtuMaker", kind: "enum", T: () => ["fibertest30.ft.enums.RtuMaker", RtuMaker] },
            { no: 3, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "mfid", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "mfsn", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "omid", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "omsn", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "serial", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "ownPortCount", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 10, name: "fullPortCount", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 11, name: "mainChannel", kind: "message", T: () => NetAddress },
            { no: 12, name: "mainChannelState", kind: "enum", T: () => ["fibertest30.ft.enums.RtuPartState", RtuPartState] },
            { no: 13, name: "reserveChannel", kind: "message", T: () => NetAddress },
            { no: 14, name: "reserveChannelState", kind: "enum", T: () => ["fibertest30.ft.enums.RtuPartState", RtuPartState] },
            { no: 15, name: "isReserveChannelSet", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 16, name: "otdrNetAddress", kind: "message", T: () => NetAddress },
            { no: 17, name: "monitoringMode", kind: "enum", T: () => ["fibertest30.ft.enums.MonitoringState", MonitoringState] },
            { no: 18, name: "preciseMeas", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 19, name: "preciseSave", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 20, name: "fastSave", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 21, name: "version", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 22, name: "version2", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 23, name: "bops", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Bop },
            { no: 24, name: "traces", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Trace },
            { no: 25, name: "treeOfAcceptableMeasParams", kind: "message", T: () => TreeOfAcceptableMeasParams },
            { no: 26, name: "comment", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message fibertest30.rtu_tree.Rtu
 */
export const Rtu = new Rtu$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetRtuTreeRequest$Type extends MessageType<GetRtuTreeRequest> {
    constructor() {
        super("fibertest30.rtu_tree.GetRtuTreeRequest", []);
    }
}
/**
 * @generated MessageType for protobuf message fibertest30.rtu_tree.GetRtuTreeRequest
 */
export const GetRtuTreeRequest = new GetRtuTreeRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetRtuTreeResponse$Type extends MessageType<GetRtuTreeResponse> {
    constructor() {
        super("fibertest30.rtu_tree.GetRtuTreeResponse", [
            { no: 1, name: "rtus", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Rtu }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message fibertest30.rtu_tree.GetRtuTreeResponse
 */
export const GetRtuTreeResponse = new GetRtuTreeResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetRtuRequest$Type extends MessageType<GetRtuRequest> {
    constructor() {
        super("fibertest30.rtu_tree.GetRtuRequest", [
            { no: 1, name: "rtuId", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message fibertest30.rtu_tree.GetRtuRequest
 */
export const GetRtuRequest = new GetRtuRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetRtuResponse$Type extends MessageType<GetRtuResponse> {
    constructor() {
        super("fibertest30.rtu_tree.GetRtuResponse", [
            { no: 1, name: "rtu", kind: "message", T: () => Rtu }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message fibertest30.rtu_tree.GetRtuResponse
 */
export const GetRtuResponse = new GetRtuResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AttachTraceRequest$Type extends MessageType<AttachTraceRequest> {
    constructor() {
        super("fibertest30.rtu_tree.AttachTraceRequest", [
            { no: 1, name: "traceId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "portOfOtau", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PortOfOtau }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message fibertest30.rtu_tree.AttachTraceRequest
 */
export const AttachTraceRequest = new AttachTraceRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AttachTraceResponse$Type extends MessageType<AttachTraceResponse> {
    constructor() {
        super("fibertest30.rtu_tree.AttachTraceResponse", []);
    }
}
/**
 * @generated MessageType for protobuf message fibertest30.rtu_tree.AttachTraceResponse
 */
export const AttachTraceResponse = new AttachTraceResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DetachTraceRequest$Type extends MessageType<DetachTraceRequest> {
    constructor() {
        super("fibertest30.rtu_tree.DetachTraceRequest", [
            { no: 1, name: "traceId", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message fibertest30.rtu_tree.DetachTraceRequest
 */
export const DetachTraceRequest = new DetachTraceRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DetachTraceResponse$Type extends MessageType<DetachTraceResponse> {
    constructor() {
        super("fibertest30.rtu_tree.DetachTraceResponse", []);
    }
}
/**
 * @generated MessageType for protobuf message fibertest30.rtu_tree.DetachTraceResponse
 */
export const DetachTraceResponse = new DetachTraceResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AttachOtauRequest$Type extends MessageType<AttachOtauRequest> {
    constructor() {
        super("fibertest30.rtu_tree.AttachOtauRequest", [
            { no: 1, name: "rtuId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "netAddress", kind: "message", T: () => NetAddress },
            { no: 3, name: "opticalPort", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message fibertest30.rtu_tree.AttachOtauRequest
 */
export const AttachOtauRequest = new AttachOtauRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AttachOtauResponse$Type extends MessageType<AttachOtauResponse> {
    constructor() {
        super("fibertest30.rtu_tree.AttachOtauResponse", []);
    }
}
/**
 * @generated MessageType for protobuf message fibertest30.rtu_tree.AttachOtauResponse
 */
export const AttachOtauResponse = new AttachOtauResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DetachOtauRequest$Type extends MessageType<DetachOtauRequest> {
    constructor() {
        super("fibertest30.rtu_tree.DetachOtauRequest", [
            { no: 1, name: "rtuId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "otauId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "netAddress", kind: "message", T: () => NetAddress },
            { no: 4, name: "opticalPort", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message fibertest30.rtu_tree.DetachOtauRequest
 */
export const DetachOtauRequest = new DetachOtauRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DetachOtauResponse$Type extends MessageType<DetachOtauResponse> {
    constructor() {
        super("fibertest30.rtu_tree.DetachOtauResponse", []);
    }
}
/**
 * @generated MessageType for protobuf message fibertest30.rtu_tree.DetachOtauResponse
 */
export const DetachOtauResponse = new DetachOtauResponse$Type();
/**
 * @generated ServiceType for protobuf service fibertest30.rtu_tree.RtuTree
 */
export const RtuTree = new ServiceType("fibertest30.rtu_tree.RtuTree", [
    { name: "GetRtuTree", options: {}, I: GetRtuTreeRequest, O: GetRtuTreeResponse },
    { name: "GetRtu", options: {}, I: GetRtuRequest, O: GetRtuResponse },
    { name: "AttachTrace", options: {}, I: AttachTraceRequest, O: AttachTraceResponse },
    { name: "DetachTrace", options: {}, I: DetachTraceRequest, O: DetachTraceResponse },
    { name: "AttachOtau", options: {}, I: AttachOtauRequest, O: AttachOtauResponse },
    { name: "DetachOtau", options: {}, I: DetachOtauRequest, O: DetachOtauResponse }
]);
