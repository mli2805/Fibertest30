// @generated by protobuf-ts 2.9.4 with parameter long_type_string,optimize_code_size
// @generated from protobuf file "rtu_tree.proto" (package "fibertest30.rtu_tree", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message fibertest30.rtu_tree.NetAddress
 */
export interface NetAddress {
    /**
     * @generated from protobuf field: string ip4Address = 1;
     */
    ip4Address: string;
    /**
     * @generated from protobuf field: string hostName = 2;
     */
    hostName: string;
    /**
     * @generated from protobuf field: int32 port = 3;
     */
    port: number;
}
/**
 * @generated from protobuf message fibertest30.rtu_tree.PortOfOtau
 */
export interface PortOfOtau {
    /**
     * @generated from protobuf field: optional string otauId = 1;
     */
    otauId?: string; // main MAK-100 OTAU has no ID
    /**
     * @generated from protobuf field: fibertest30.rtu_tree.NetAddress otauNetAddress = 2;
     */
    otauNetAddress?: NetAddress;
    /**
     * @generated from protobuf field: string otauSerial = 3;
     */
    otauSerial: string;
    /**
     * @generated from protobuf field: int32 opticalPort = 4;
     */
    opticalPort: number;
    /**
     * @generated from protobuf field: bool isPortOnMainCharon = 5;
     */
    isPortOnMainCharon: boolean;
    /**
     * @generated from protobuf field: int32 mainCharonPort = 6;
     */
    mainCharonPort: number;
}
/**
 * @generated from protobuf message fibertest30.rtu_tree.Trace
 */
export interface Trace {
    /**
     * @generated from protobuf field: string traceId = 1;
     */
    traceId: string;
    /**
     * @generated from protobuf field: string rtuId = 2;
     */
    rtuId: string;
    /**
     * @generated from protobuf field: string title = 3;
     */
    title: string;
    /**
     * @generated from protobuf field: optional fibertest30.rtu_tree.PortOfOtau port = 4;
     */
    port?: PortOfOtau; // there is no PortOfOtau if trace is detached
    /**
     * @generated from protobuf field: bool isAttached = 5;
     */
    isAttached: boolean;
    /**
     * @generated from protobuf field: fibertest30.rtu_tree.FiberState state = 6;
     */
    state: FiberState;
    /**
     * @generated from protobuf field: bool hasEnoughBaseRefsToPerformMonitoring = 7;
     */
    hasEnoughBaseRefsToPerformMonitoring: boolean;
    /**
     * @generated from protobuf field: bool isIncludedInMonitoringCycle = 8;
     */
    isIncludedInMonitoringCycle: boolean;
    /**
     * @generated from protobuf field: fibertest30.rtu_tree.TceLinkState tceLinkState = 9;
     */
    tceLinkState: TceLinkState;
}
/**
 * @generated from protobuf message fibertest30.rtu_tree.Bop
 */
export interface Bop {
    /**
     * @generated from protobuf field: string bopId = 1;
     */
    bopId: string;
    /**
     * @generated from protobuf field: string rtuId = 2;
     */
    rtuId: string;
    /**
     * @generated from protobuf field: fibertest30.rtu_tree.NetAddress bopNetAddress = 3;
     */
    bopNetAddress?: NetAddress;
    /**
     * @generated from protobuf field: int32 masterPort = 4;
     */
    masterPort: number;
    /**
     * @generated from protobuf field: bool isOk = 5;
     */
    isOk: boolean;
    /**
     * @generated from protobuf field: string serial = 6;
     */
    serial: string;
    /**
     * @generated from protobuf field: int32 portCount = 7;
     */
    portCount: number;
    /**
     * @generated from protobuf field: repeated fibertest30.rtu_tree.Trace traces = 8;
     */
    traces: Trace[];
}
/**
 * @generated from protobuf message fibertest30.rtu_tree.Rtu
 */
export interface Rtu {
    /**
     * @generated from protobuf field: string rtuId = 1;
     */
    rtuId: string;
    /**
     * @generated from protobuf field: fibertest30.rtu_tree.RtuMaker rtuMaker = 2;
     */
    rtuMaker: RtuMaker;
    /**
     * @generated from protobuf field: string title = 3;
     */
    title: string;
    /**
     * @generated from protobuf field: optional string mfid = 4;
     */
    mfid?: string;
    /**
     * @generated from protobuf field: optional string mfsn = 5;
     */
    mfsn?: string;
    /**
     * @generated from protobuf field: optional string omid = 6;
     */
    omid?: string;
    /**
     * @generated from protobuf field: optional string omsn = 7;
     */
    omsn?: string;
    /**
     * @generated from protobuf field: optional string serial = 8;
     */
    serial?: string;
    /**
     * @generated from protobuf field: int32 ownPortCount = 9;
     */
    ownPortCount: number;
    /**
     * @generated from protobuf field: int32 fullPortCount = 10;
     */
    fullPortCount: number;
    /**
     * @generated from protobuf field: fibertest30.rtu_tree.NetAddress mainChannel = 11;
     */
    mainChannel?: NetAddress;
    /**
     * @generated from protobuf field: fibertest30.rtu_tree.RtuPartState mainChannelState = 12;
     */
    mainChannelState: RtuPartState;
    /**
     * @generated from protobuf field: fibertest30.rtu_tree.NetAddress reserveChannel = 13;
     */
    reserveChannel?: NetAddress;
    /**
     * @generated from protobuf field: fibertest30.rtu_tree.RtuPartState reserveChannelState = 14;
     */
    reserveChannelState: RtuPartState;
    /**
     * @generated from protobuf field: bool isReserveChannelSet = 15;
     */
    isReserveChannelSet: boolean;
    /**
     * @generated from protobuf field: fibertest30.rtu_tree.NetAddress otdrNetAddress = 16;
     */
    otdrNetAddress?: NetAddress;
    /**
     * @generated from protobuf field: fibertest30.rtu_tree.MonitoringState monitoringMode = 17;
     */
    monitoringMode: MonitoringState;
    /**
     * @generated from protobuf field: optional string version = 18;
     */
    version?: string;
    /**
     * @generated from protobuf field: optional string version2 = 19;
     */
    version2?: string;
    /**
     * @generated from protobuf field: repeated fibertest30.rtu_tree.Bop bops = 20;
     */
    bops: Bop[];
    /**
     * @generated from protobuf field: repeated fibertest30.rtu_tree.Trace traces = 21;
     */
    traces: Trace[];
}
/**
 * @generated from protobuf message fibertest30.rtu_tree.GetRtuTreeRequest
 */
export interface GetRtuTreeRequest {
}
/**
 * @generated from protobuf message fibertest30.rtu_tree.GetRtuTreeResponse
 */
export interface GetRtuTreeResponse {
    /**
     * @generated from protobuf field: repeated fibertest30.rtu_tree.Rtu rtus = 1;
     */
    rtus: Rtu[];
}
/**
 * @generated from protobuf enum fibertest30.rtu_tree.RtuMaker
 */
export enum RtuMaker {
    /**
     * @generated from protobuf enum value: Iit = 0;
     */
    Iit = 0,
    /**
     * @generated from protobuf enum value: Veex = 1;
     */
    Veex = 1
}
/**
 * @generated from protobuf enum fibertest30.rtu_tree.RtuPartState
 */
export enum RtuPartState {
    /**
     * @generated from protobuf enum value: NotSetYet = 0;
     */
    NotSetYet = 0,
    /**
     * can't be just Ok
     *
     * @generated from protobuf enum value: RtuPartState_Ok = 1;
     */
    RtuPartState_Ok = 1,
    /**
     * @generated from protobuf enum value: Broken = -1;
     */
    Broken = -1
}
/**
 * @generated from protobuf enum fibertest30.rtu_tree.MonitoringState
 */
export enum MonitoringState {
    /**
     * can't be just Unknown
     *
     * @generated from protobuf enum value: MonitoringState_Unknown = 0;
     */
    MonitoringState_Unknown = 0,
    /**
     * @generated from protobuf enum value: Off = 1;
     */
    Off = 1,
    /**
     * @generated from protobuf enum value: On = 2;
     */
    On = 2
}
/**
 * @generated from protobuf enum fibertest30.rtu_tree.FiberState
 */
export enum FiberState {
    /**
     * @generated from protobuf enum value: NotInTrace = 0;
     */
    NotInTrace = 0,
    /**
     * @generated from protobuf enum value: NotJoined = 1;
     */
    NotJoined = 1,
    /**
     * can't be just Unknown
     *
     * @generated from protobuf enum value: FiberState_Unknown = 2;
     */
    FiberState_Unknown = 2,
    /**
     * @generated from protobuf enum value: NotInZone = 3;
     */
    NotInZone = 3,
    /**
     * can't be just Ok
     *
     * @generated from protobuf enum value: FiberState_Ok = 4;
     */
    FiberState_Ok = 4,
    /**
     * @generated from protobuf enum value: Suspicion = 5;
     */
    Suspicion = 5,
    /**
     * @generated from protobuf enum value: Minor = 6;
     */
    Minor = 6,
    /**
     * @generated from protobuf enum value: Major = 7;
     */
    Major = 7,
    /**
     * @generated from protobuf enum value: Critical = 8;
     */
    Critical = 8,
    /**
     * @generated from protobuf enum value: User = 9;
     */
    User = 9,
    /**
     * @generated from protobuf enum value: FiberBreak = 10;
     */
    FiberBreak = 10,
    /**
     * @generated from protobuf enum value: NoFiber = 11;
     */
    NoFiber = 11,
    /**
     * @generated from protobuf enum value: HighLighted = 14;
     */
    HighLighted = 14,
    /**
     * @generated from protobuf enum value: DistanceMeasurement = 15;
     */
    DistanceMeasurement = 15,
    /**
     * @generated from protobuf enum value: Nothing = -1;
     */
    Nothing = -1
}
/**
 * @generated from protobuf enum fibertest30.rtu_tree.TceLinkState
 */
export enum TceLinkState {
    /**
     * @generated from protobuf enum value: NoLink = 0;
     */
    NoLink = 0,
    /**
     * @generated from protobuf enum value: SnmpTrapOff = 1;
     */
    SnmpTrapOff = 1,
    /**
     * @generated from protobuf enum value: SnmpTrapOn = 2;
     */
    SnmpTrapOn = 2
}
// @generated message type with reflection information, may provide speed optimized methods
class NetAddress$Type extends MessageType<NetAddress> {
    constructor() {
        super("fibertest30.rtu_tree.NetAddress", [
            { no: 1, name: "ip4Address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "hostName", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "port", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message fibertest30.rtu_tree.NetAddress
 */
export const NetAddress = new NetAddress$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PortOfOtau$Type extends MessageType<PortOfOtau> {
    constructor() {
        super("fibertest30.rtu_tree.PortOfOtau", [
            { no: 1, name: "otauId", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "otauNetAddress", kind: "message", T: () => NetAddress },
            { no: 3, name: "otauSerial", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "opticalPort", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "isPortOnMainCharon", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "mainCharonPort", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message fibertest30.rtu_tree.PortOfOtau
 */
export const PortOfOtau = new PortOfOtau$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Trace$Type extends MessageType<Trace> {
    constructor() {
        super("fibertest30.rtu_tree.Trace", [
            { no: 1, name: "traceId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "rtuId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "port", kind: "message", T: () => PortOfOtau },
            { no: 5, name: "isAttached", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "state", kind: "enum", T: () => ["fibertest30.rtu_tree.FiberState", FiberState] },
            { no: 7, name: "hasEnoughBaseRefsToPerformMonitoring", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "isIncludedInMonitoringCycle", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "tceLinkState", kind: "enum", T: () => ["fibertest30.rtu_tree.TceLinkState", TceLinkState] }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message fibertest30.rtu_tree.Trace
 */
export const Trace = new Trace$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Bop$Type extends MessageType<Bop> {
    constructor() {
        super("fibertest30.rtu_tree.Bop", [
            { no: 1, name: "bopId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "rtuId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "bopNetAddress", kind: "message", T: () => NetAddress },
            { no: 4, name: "masterPort", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "isOk", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "serial", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "portCount", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "traces", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Trace }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message fibertest30.rtu_tree.Bop
 */
export const Bop = new Bop$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Rtu$Type extends MessageType<Rtu> {
    constructor() {
        super("fibertest30.rtu_tree.Rtu", [
            { no: 1, name: "rtuId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "rtuMaker", kind: "enum", T: () => ["fibertest30.rtu_tree.RtuMaker", RtuMaker] },
            { no: 3, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "mfid", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "mfsn", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "omid", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "omsn", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "serial", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "ownPortCount", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 10, name: "fullPortCount", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 11, name: "mainChannel", kind: "message", T: () => NetAddress },
            { no: 12, name: "mainChannelState", kind: "enum", T: () => ["fibertest30.rtu_tree.RtuPartState", RtuPartState] },
            { no: 13, name: "reserveChannel", kind: "message", T: () => NetAddress },
            { no: 14, name: "reserveChannelState", kind: "enum", T: () => ["fibertest30.rtu_tree.RtuPartState", RtuPartState] },
            { no: 15, name: "isReserveChannelSet", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 16, name: "otdrNetAddress", kind: "message", T: () => NetAddress },
            { no: 17, name: "monitoringMode", kind: "enum", T: () => ["fibertest30.rtu_tree.MonitoringState", MonitoringState] },
            { no: 18, name: "version", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 19, name: "version2", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 20, name: "bops", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Bop },
            { no: 21, name: "traces", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Trace }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message fibertest30.rtu_tree.Rtu
 */
export const Rtu = new Rtu$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetRtuTreeRequest$Type extends MessageType<GetRtuTreeRequest> {
    constructor() {
        super("fibertest30.rtu_tree.GetRtuTreeRequest", []);
    }
}
/**
 * @generated MessageType for protobuf message fibertest30.rtu_tree.GetRtuTreeRequest
 */
export const GetRtuTreeRequest = new GetRtuTreeRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetRtuTreeResponse$Type extends MessageType<GetRtuTreeResponse> {
    constructor() {
        super("fibertest30.rtu_tree.GetRtuTreeResponse", [
            { no: 1, name: "rtus", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Rtu }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message fibertest30.rtu_tree.GetRtuTreeResponse
 */
export const GetRtuTreeResponse = new GetRtuTreeResponse$Type();
/**
 * @generated ServiceType for protobuf service fibertest30.rtu_tree.RtuTree
 */
export const RtuTree = new ServiceType("fibertest30.rtu_tree.RtuTree", [
    { name: "GetRtuTree", options: {}, I: GetRtuTreeRequest, O: GetRtuTreeResponse }
]);
