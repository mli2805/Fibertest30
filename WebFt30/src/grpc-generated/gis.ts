// @generated by protobuf-ts 2.9.4 with parameter long_type_string,optimize_code_size
// @generated from protobuf file "gis.proto" (package "fibertest30.gis", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { MessageType } from "@protobuf-ts/runtime";
import { FiberState } from "./ft.enums";
/**
 * if dictionary is empty - fiber is not in trace (NotInTrace)
 *
 * @generated from protobuf message fibertest30.gis.FiberStateDictionaryItem
 */
export interface FiberStateDictionaryItem {
    /**
     * @generated from protobuf field: string traceId = 1;
     */
    traceId: string; // key
    /**
     * @generated from protobuf field: fibertest30.ft.enums.FiberState traceState = 2;
     */
    traceState: FiberState; // value
}
/**
 * @generated from protobuf message fibertest30.gis.GeoCoordinate
 */
export interface GeoCoordinate {
    /**
     * @generated from protobuf field: double latitude = 1;
     */
    latitude: number;
    /**
     * @generated from protobuf field: double longitude = 2;
     */
    longitude: number;
}
/**
 * @generated from protobuf message fibertest30.gis.TraceNode
 */
export interface TraceNode {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string title = 2;
     */
    title: string;
    /**
     * @generated from protobuf field: fibertest30.gis.GeoCoordinate coors = 3;
     */
    coors?: GeoCoordinate;
    /**
     * @generated from protobuf field: fibertest30.gis.EquipmentType equipmentType = 4;
     */
    equipmentType: EquipmentType;
    /**
     * @generated from protobuf field: string comment = 5;
     */
    comment: string;
    /**
     * @generated from protobuf field: optional fibertest30.ft.enums.FiberState state = 6;
     */
    state?: FiberState;
    /**
     * @generated from protobuf field: optional string accidentOnTraceId = 7;
     */
    accidentOnTraceId?: string;
}
/**
 * @generated from protobuf message fibertest30.gis.GeoEquipment
 */
export interface GeoEquipment {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string nodeId = 2;
     */
    nodeId: string;
    /**
     * @generated from protobuf field: string title = 3;
     */
    title: string;
    /**
     * @generated from protobuf field: fibertest30.gis.EquipmentType type = 4;
     */
    type: EquipmentType;
    /**
     * @generated from protobuf field: int32 cableReserveLeft = 5;
     */
    cableReserveLeft: number;
    /**
     * @generated from protobuf field: int32 cableReserveRight = 6;
     */
    cableReserveRight: number;
    /**
     * @generated from protobuf field: string comment = 7;
     */
    comment: string;
}
/**
 * @generated from protobuf message fibertest30.gis.GeoFiber
 */
export interface GeoFiber {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string node1id = 2 [json_name = "node1id"];
     */
    node1Id: string;
    /**
     * @generated from protobuf field: fibertest30.gis.GeoCoordinate coors1 = 3;
     */
    coors1?: GeoCoordinate;
    /**
     * @generated from protobuf field: string node2id = 4 [json_name = "node2id"];
     */
    node2Id: string;
    /**
     * @generated from protobuf field: fibertest30.gis.GeoCoordinate coors2 = 5;
     */
    coors2?: GeoCoordinate;
    /**
     * @generated from protobuf field: repeated fibertest30.gis.FiberStateDictionaryItem states = 7;
     */
    states: FiberStateDictionaryItem[];
    /**
     * @generated from protobuf field: repeated fibertest30.gis.FiberStateDictionaryItem tracesWithExceededLossCoeff = 8;
     */
    tracesWithExceededLossCoeff: FiberStateDictionaryItem[];
}
/**
 * @generated from protobuf message fibertest30.gis.OpticalLength
 */
export interface OpticalLength {
    /**
     * @generated from protobuf field: string traceId = 1;
     */
    traceId: string;
    /**
     * @generated from protobuf field: double length = 2;
     */
    length: number;
}
/**
 * @generated from protobuf message fibertest30.gis.FiberInfo
 */
export interface FiberInfo {
    /**
     * @generated from protobuf field: string fiberId = 1;
     */
    fiberId: string;
    /**
     * @generated from protobuf field: string leftNodeTitle = 2;
     */
    leftNodeTitle: string;
    /**
     * @generated from protobuf field: string rightNodeTitle = 3;
     */
    rightNodeTitle: string;
    /**
     * @generated from protobuf field: double gpsLength = 4;
     */
    gpsLength: number;
    /**
     * @generated from protobuf field: double userInputedLength = 5;
     */
    userInputedLength: number;
    /**
     * @generated from protobuf field: repeated fibertest30.gis.OpticalLength tracesThrough = 6;
     */
    tracesThrough: OpticalLength[];
    /**
     * @generated from protobuf field: bool hasTraceUnderMonitoring = 7;
     */
    hasTraceUnderMonitoring: boolean;
}
/**
 * @generated from protobuf message fibertest30.gis.ColoredLandmark
 */
export interface ColoredLandmark {
    /**
     * @generated from protobuf field: string nodeId = 1;
     */
    nodeId: string;
    /**
     * @generated from protobuf field: string fiberId = 2;
     */
    fiberId: string;
    /**
     * @generated from protobuf field: int32 number = 3;
     */
    number: number;
    /**
     * @generated from protobuf field: int32 numberIncludingAdjustmentPoints = 4;
     */
    numberIncludingAdjustmentPoints: number;
    /**
     * @generated from protobuf field: string nodeTitle = 5;
     */
    nodeTitle: string;
    /**
     * @generated from protobuf field: string nodeTitleColor = 6;
     */
    nodeTitleColor: string;
    /**
     * @generated from protobuf field: string nodeComment = 7;
     */
    nodeComment: string;
    /**
     * @generated from protobuf field: string nodeCommentColor = 8;
     */
    nodeCommentColor: string;
    /**
     * @generated from protobuf field: string equipmentId = 9;
     */
    equipmentId: string;
    /**
     * @generated from protobuf field: string equipmentTitle = 10;
     */
    equipmentTitle: string;
    /**
     * @generated from protobuf field: string equipmentTitleColor = 11;
     */
    equipmentTitleColor: string;
    /**
     * @generated from protobuf field: int32 leftCableReserve = 12;
     */
    leftCableReserve: number;
    /**
     * @generated from protobuf field: int32 rightCableReserve = 13;
     */
    rightCableReserve: number;
    /**
     * @generated from protobuf field: string cableReservesColor = 14;
     */
    cableReservesColor: string;
    /**
     * @generated from protobuf field: double gpsDistance = 15;
     */
    gpsDistance: number;
    /**
     * @generated from protobuf field: double gpsSection = 16;
     */
    gpsSection: number;
    /**
     * @generated from protobuf field: bool isUserInput = 17;
     */
    isUserInput: boolean;
    /**
     * @generated from protobuf field: string gpsSectionColor = 18;
     */
    gpsSectionColor: string;
    /**
     * @generated from protobuf field: double opticalDistance = 19;
     */
    opticalDistance: number;
    /**
     * @generated from protobuf field: double opticalSection = 20;
     */
    opticalSection: number;
    /**
     * @generated from protobuf field: int32 eventNumber = 21;
     */
    eventNumber: number;
    /**
     * @generated from protobuf field: fibertest30.gis.GeoCoordinate gpsCoors = 22;
     */
    gpsCoors?: GeoCoordinate;
    /**
     * @generated from protobuf field: string gpsCoorsColor = 23;
     */
    gpsCoorsColor: string;
    /**
     * @generated from protobuf field: fibertest30.gis.EquipmentType equipmentType = 24;
     */
    equipmentType: EquipmentType;
    /**
     * @generated from protobuf field: string equipmentTypeColor = 25;
     */
    equipmentTypeColor: string;
    /**
     * @generated from protobuf field: bool isFromBase = 26;
     */
    isFromBase: boolean;
}
/**
 * @generated from protobuf message fibertest30.gis.LandmarksModel
 */
export interface LandmarksModel {
    /**
     * @generated from protobuf field: string landmarksModelId = 1;
     */
    landmarksModelId: string;
    /**
     * @generated from protobuf field: repeated fibertest30.gis.ColoredLandmark landmarks = 2;
     */
    landmarks: ColoredLandmark[];
}
/**
 * @generated from protobuf message fibertest30.gis.GeoTrace
 */
export interface GeoTrace {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string title = 2;
     */
    title: string;
    /**
     * @generated from protobuf field: repeated string nodeIds = 3;
     */
    nodeIds: string[];
    /**
     * @generated from protobuf field: repeated string equipmentIds = 4;
     */
    equipmentIds: string[];
    /**
     * @generated from protobuf field: repeated string fiberIds = 5;
     */
    fiberIds: string[];
    /**
     * @generated from protobuf field: bool hasAnyBaseRef = 6;
     */
    hasAnyBaseRef: boolean;
    /**
     * @generated from protobuf field: fibertest30.ft.enums.FiberState state = 7;
     */
    state: FiberState;
    /**
     * @generated from protobuf field: bool darkMode = 8;
     */
    darkMode: boolean;
    /**
     * @generated from protobuf field: string comment = 9;
     */
    comment: string;
}
/**
 * @generated from protobuf message fibertest30.gis.AllGeoData
 */
export interface AllGeoData {
    /**
     * @generated from protobuf field: repeated fibertest30.gis.GeoFiber fibers = 1;
     */
    fibers: GeoFiber[];
    /**
     * @generated from protobuf field: repeated fibertest30.gis.TraceNode nodes = 2;
     */
    nodes: TraceNode[];
    /**
     * @generated from protobuf field: repeated fibertest30.gis.GeoTrace traces = 3;
     */
    traces: GeoTrace[];
    /**
     * @generated from protobuf field: repeated fibertest30.gis.GeoEquipment equipments = 4;
     */
    equipments: GeoEquipment[];
}
/**
 * GetAllGeoData
 *
 * @generated from protobuf message fibertest30.gis.GetAllGeoDataRequest
 */
export interface GetAllGeoDataRequest {
}
/**
 * @generated from protobuf message fibertest30.gis.GetAllGeoDataResponse
 */
export interface GetAllGeoDataResponse {
    /**
     * @generated from protobuf field: fibertest30.gis.AllGeoData data = 1;
     */
    data?: AllGeoData;
}
/**
 * GetFiberInfo
 *
 * @generated from protobuf message fibertest30.gis.GetFiberInfoRequest
 */
export interface GetFiberInfoRequest {
    /**
     * @generated from protobuf field: string fiberId = 1;
     */
    fiberId: string;
}
/**
 * @generated from protobuf message fibertest30.gis.GetFiberInfoResponse
 */
export interface GetFiberInfoResponse {
    /**
     * @generated from protobuf field: fibertest30.gis.FiberInfo fiberInfo = 1;
     */
    fiberInfo?: FiberInfo;
}
/**
 * GetLandmarksModel
 *
 * @generated from protobuf message fibertest30.gis.GetLandmarksModelRequest
 */
export interface GetLandmarksModelRequest {
    /**
     * @generated from protobuf field: string landmarksModelId = 1;
     */
    landmarksModelId: string;
}
/**
 * @generated from protobuf message fibertest30.gis.GetLandmarksModelResponse
 */
export interface GetLandmarksModelResponse {
    /**
     * @generated from protobuf field: fibertest30.gis.LandmarksModel landmarksModel = 1;
     */
    landmarksModel?: LandmarksModel;
}
/**
 * CreateLandmarksModel
 *
 * @generated from protobuf message fibertest30.gis.CreateLandmarksModelRequest
 */
export interface CreateLandmarksModelRequest {
    /**
     * @generated from protobuf field: string landmarksModelId = 1;
     */
    landmarksModelId: string;
    /**
     * @generated from protobuf field: string traceId = 2;
     */
    traceId: string;
    /**
     * @generated from protobuf field: fibertest30.gis.GpsInputMode gpsInputMode = 3;
     */
    gpsInputMode: GpsInputMode;
}
/**
 * @generated from protobuf message fibertest30.gis.CreateLandmarksModelResponse
 */
export interface CreateLandmarksModelResponse {
}
/**
 * UpdateLandmarksModel
 *
 * @generated from protobuf message fibertest30.gis.UpdateLandmarksModelRequest
 */
export interface UpdateLandmarksModelRequest {
    /**
     * @generated from protobuf field: string landmarksModelId = 1;
     */
    landmarksModelId: string;
    /**
     * @generated from protobuf field: optional fibertest30.gis.ColoredLandmark changedLandmark = 2;
     */
    changedLandmark?: ColoredLandmark;
    /**
     * @generated from protobuf field: optional string gpsInputMode = 3;
     */
    gpsInputMode?: string;
    /**
     * @generated from protobuf field: optional bool isFilterOn = 4;
     */
    isFilterOn?: boolean;
}
/**
 * @generated from protobuf message fibertest30.gis.UpdateLandmarksModelResponse
 */
export interface UpdateLandmarksModelResponse {
}
/**
 * DeleteLandmarksModel
 *
 * @generated from protobuf message fibertest30.gis.DeleteLandmarksModelRequest
 */
export interface DeleteLandmarksModelRequest {
    /**
     * @generated from protobuf field: string landmarksModelId = 1;
     */
    landmarksModelId: string;
}
/**
 * @generated from protobuf message fibertest30.gis.DeleteLandmarksModelResponse
 */
export interface DeleteLandmarksModelResponse {
}
/**
 * @generated from protobuf enum fibertest30.gis.EquipmentType
 */
export enum EquipmentType {
    /**
     * @generated from protobuf enum value: Nothing = 0;
     */
    Nothing = 0,
    /**
     * @generated from protobuf enum value: AdjustmentPoint = 100;
     */
    AdjustmentPoint = 100,
    /**
     * @generated from protobuf enum value: EmptyNode = 200;
     */
    EmptyNode = 200,
    /**
     * @generated from protobuf enum value: CableReserve = 300;
     */
    CableReserve = 300,
    /**
     * @generated from protobuf enum value: Other = 400;
     */
    Other = 400,
    /**
     * @generated from protobuf enum value: Closure = 402;
     */
    Closure = 402,
    /**
     * @generated from protobuf enum value: Cross = 403;
     */
    Cross = 403,
    /**
     * @generated from protobuf enum value: Well = 405;
     */
    Well = 405,
    /**
     * @generated from protobuf enum value: Terminal = 406;
     */
    Terminal = 406,
    /**
     * @generated from protobuf enum value: Rtu = 500;
     */
    Rtu = 500,
    /**
     * @generated from protobuf enum value: AccidentPlace = 501;
     */
    AccidentPlace = 501
}
/**
 * @generated from protobuf enum fibertest30.gis.GpsInputMode
 */
export enum GpsInputMode {
    /**
     * @generated from protobuf enum value: Degrees = 0;
     */
    Degrees = 0,
    /**
     * @generated from protobuf enum value: Minutes = 1;
     */
    Minutes = 1,
    /**
     * @generated from protobuf enum value: Seconds = 2;
     */
    Seconds = 2
}
// @generated message type with reflection information, may provide speed optimized methods
class FiberStateDictionaryItem$Type extends MessageType<FiberStateDictionaryItem> {
    constructor() {
        super("fibertest30.gis.FiberStateDictionaryItem", [
            { no: 1, name: "traceId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "traceState", kind: "enum", T: () => ["fibertest30.ft.enums.FiberState", FiberState] }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message fibertest30.gis.FiberStateDictionaryItem
 */
export const FiberStateDictionaryItem = new FiberStateDictionaryItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GeoCoordinate$Type extends MessageType<GeoCoordinate> {
    constructor() {
        super("fibertest30.gis.GeoCoordinate", [
            { no: 1, name: "latitude", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 2, name: "longitude", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message fibertest30.gis.GeoCoordinate
 */
export const GeoCoordinate = new GeoCoordinate$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TraceNode$Type extends MessageType<TraceNode> {
    constructor() {
        super("fibertest30.gis.TraceNode", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "coors", kind: "message", T: () => GeoCoordinate },
            { no: 4, name: "equipmentType", kind: "enum", T: () => ["fibertest30.gis.EquipmentType", EquipmentType] },
            { no: 5, name: "comment", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "state", kind: "enum", opt: true, T: () => ["fibertest30.ft.enums.FiberState", FiberState] },
            { no: 7, name: "accidentOnTraceId", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message fibertest30.gis.TraceNode
 */
export const TraceNode = new TraceNode$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GeoEquipment$Type extends MessageType<GeoEquipment> {
    constructor() {
        super("fibertest30.gis.GeoEquipment", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "nodeId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "type", kind: "enum", T: () => ["fibertest30.gis.EquipmentType", EquipmentType] },
            { no: 5, name: "cableReserveLeft", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "cableReserveRight", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "comment", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message fibertest30.gis.GeoEquipment
 */
export const GeoEquipment = new GeoEquipment$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GeoFiber$Type extends MessageType<GeoFiber> {
    constructor() {
        super("fibertest30.gis.GeoFiber", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "node1id", kind: "scalar", jsonName: "node1id", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "coors1", kind: "message", T: () => GeoCoordinate },
            { no: 4, name: "node2id", kind: "scalar", jsonName: "node2id", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "coors2", kind: "message", T: () => GeoCoordinate },
            { no: 7, name: "states", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => FiberStateDictionaryItem },
            { no: 8, name: "tracesWithExceededLossCoeff", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => FiberStateDictionaryItem }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message fibertest30.gis.GeoFiber
 */
export const GeoFiber = new GeoFiber$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OpticalLength$Type extends MessageType<OpticalLength> {
    constructor() {
        super("fibertest30.gis.OpticalLength", [
            { no: 1, name: "traceId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "length", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message fibertest30.gis.OpticalLength
 */
export const OpticalLength = new OpticalLength$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FiberInfo$Type extends MessageType<FiberInfo> {
    constructor() {
        super("fibertest30.gis.FiberInfo", [
            { no: 1, name: "fiberId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "leftNodeTitle", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "rightNodeTitle", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "gpsLength", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 5, name: "userInputedLength", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 6, name: "tracesThrough", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => OpticalLength },
            { no: 7, name: "hasTraceUnderMonitoring", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message fibertest30.gis.FiberInfo
 */
export const FiberInfo = new FiberInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ColoredLandmark$Type extends MessageType<ColoredLandmark> {
    constructor() {
        super("fibertest30.gis.ColoredLandmark", [
            { no: 1, name: "nodeId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "fiberId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "number", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "numberIncludingAdjustmentPoints", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "nodeTitle", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "nodeTitleColor", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "nodeComment", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "nodeCommentColor", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "equipmentId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "equipmentTitle", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "equipmentTitleColor", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "leftCableReserve", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 13, name: "rightCableReserve", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 14, name: "cableReservesColor", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 15, name: "gpsDistance", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 16, name: "gpsSection", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 17, name: "isUserInput", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 18, name: "gpsSectionColor", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 19, name: "opticalDistance", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 20, name: "opticalSection", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 21, name: "eventNumber", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 22, name: "gpsCoors", kind: "message", T: () => GeoCoordinate },
            { no: 23, name: "gpsCoorsColor", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 24, name: "equipmentType", kind: "enum", T: () => ["fibertest30.gis.EquipmentType", EquipmentType] },
            { no: 25, name: "equipmentTypeColor", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 26, name: "isFromBase", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message fibertest30.gis.ColoredLandmark
 */
export const ColoredLandmark = new ColoredLandmark$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LandmarksModel$Type extends MessageType<LandmarksModel> {
    constructor() {
        super("fibertest30.gis.LandmarksModel", [
            { no: 1, name: "landmarksModelId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "landmarks", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ColoredLandmark }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message fibertest30.gis.LandmarksModel
 */
export const LandmarksModel = new LandmarksModel$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GeoTrace$Type extends MessageType<GeoTrace> {
    constructor() {
        super("fibertest30.gis.GeoTrace", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "nodeIds", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "equipmentIds", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "fiberIds", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "hasAnyBaseRef", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "state", kind: "enum", T: () => ["fibertest30.ft.enums.FiberState", FiberState] },
            { no: 8, name: "darkMode", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "comment", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message fibertest30.gis.GeoTrace
 */
export const GeoTrace = new GeoTrace$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AllGeoData$Type extends MessageType<AllGeoData> {
    constructor() {
        super("fibertest30.gis.AllGeoData", [
            { no: 1, name: "fibers", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => GeoFiber },
            { no: 2, name: "nodes", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => TraceNode },
            { no: 3, name: "traces", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => GeoTrace },
            { no: 4, name: "equipments", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => GeoEquipment }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message fibertest30.gis.AllGeoData
 */
export const AllGeoData = new AllGeoData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetAllGeoDataRequest$Type extends MessageType<GetAllGeoDataRequest> {
    constructor() {
        super("fibertest30.gis.GetAllGeoDataRequest", []);
    }
}
/**
 * @generated MessageType for protobuf message fibertest30.gis.GetAllGeoDataRequest
 */
export const GetAllGeoDataRequest = new GetAllGeoDataRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetAllGeoDataResponse$Type extends MessageType<GetAllGeoDataResponse> {
    constructor() {
        super("fibertest30.gis.GetAllGeoDataResponse", [
            { no: 1, name: "data", kind: "message", T: () => AllGeoData }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message fibertest30.gis.GetAllGeoDataResponse
 */
export const GetAllGeoDataResponse = new GetAllGeoDataResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetFiberInfoRequest$Type extends MessageType<GetFiberInfoRequest> {
    constructor() {
        super("fibertest30.gis.GetFiberInfoRequest", [
            { no: 1, name: "fiberId", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message fibertest30.gis.GetFiberInfoRequest
 */
export const GetFiberInfoRequest = new GetFiberInfoRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetFiberInfoResponse$Type extends MessageType<GetFiberInfoResponse> {
    constructor() {
        super("fibertest30.gis.GetFiberInfoResponse", [
            { no: 1, name: "fiberInfo", kind: "message", T: () => FiberInfo }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message fibertest30.gis.GetFiberInfoResponse
 */
export const GetFiberInfoResponse = new GetFiberInfoResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetLandmarksModelRequest$Type extends MessageType<GetLandmarksModelRequest> {
    constructor() {
        super("fibertest30.gis.GetLandmarksModelRequest", [
            { no: 1, name: "landmarksModelId", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message fibertest30.gis.GetLandmarksModelRequest
 */
export const GetLandmarksModelRequest = new GetLandmarksModelRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetLandmarksModelResponse$Type extends MessageType<GetLandmarksModelResponse> {
    constructor() {
        super("fibertest30.gis.GetLandmarksModelResponse", [
            { no: 1, name: "landmarksModel", kind: "message", T: () => LandmarksModel }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message fibertest30.gis.GetLandmarksModelResponse
 */
export const GetLandmarksModelResponse = new GetLandmarksModelResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateLandmarksModelRequest$Type extends MessageType<CreateLandmarksModelRequest> {
    constructor() {
        super("fibertest30.gis.CreateLandmarksModelRequest", [
            { no: 1, name: "landmarksModelId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "traceId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "gpsInputMode", kind: "enum", T: () => ["fibertest30.gis.GpsInputMode", GpsInputMode] }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message fibertest30.gis.CreateLandmarksModelRequest
 */
export const CreateLandmarksModelRequest = new CreateLandmarksModelRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateLandmarksModelResponse$Type extends MessageType<CreateLandmarksModelResponse> {
    constructor() {
        super("fibertest30.gis.CreateLandmarksModelResponse", []);
    }
}
/**
 * @generated MessageType for protobuf message fibertest30.gis.CreateLandmarksModelResponse
 */
export const CreateLandmarksModelResponse = new CreateLandmarksModelResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateLandmarksModelRequest$Type extends MessageType<UpdateLandmarksModelRequest> {
    constructor() {
        super("fibertest30.gis.UpdateLandmarksModelRequest", [
            { no: 1, name: "landmarksModelId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "changedLandmark", kind: "message", T: () => ColoredLandmark },
            { no: 3, name: "gpsInputMode", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "isFilterOn", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message fibertest30.gis.UpdateLandmarksModelRequest
 */
export const UpdateLandmarksModelRequest = new UpdateLandmarksModelRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateLandmarksModelResponse$Type extends MessageType<UpdateLandmarksModelResponse> {
    constructor() {
        super("fibertest30.gis.UpdateLandmarksModelResponse", []);
    }
}
/**
 * @generated MessageType for protobuf message fibertest30.gis.UpdateLandmarksModelResponse
 */
export const UpdateLandmarksModelResponse = new UpdateLandmarksModelResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteLandmarksModelRequest$Type extends MessageType<DeleteLandmarksModelRequest> {
    constructor() {
        super("fibertest30.gis.DeleteLandmarksModelRequest", [
            { no: 1, name: "landmarksModelId", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message fibertest30.gis.DeleteLandmarksModelRequest
 */
export const DeleteLandmarksModelRequest = new DeleteLandmarksModelRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteLandmarksModelResponse$Type extends MessageType<DeleteLandmarksModelResponse> {
    constructor() {
        super("fibertest30.gis.DeleteLandmarksModelResponse", []);
    }
}
/**
 * @generated MessageType for protobuf message fibertest30.gis.DeleteLandmarksModelResponse
 */
export const DeleteLandmarksModelResponse = new DeleteLandmarksModelResponse$Type();
/**
 * @generated ServiceType for protobuf service fibertest30.gis.Gis
 */
export const Gis = new ServiceType("fibertest30.gis.Gis", [
    { name: "GetAllGeoData", options: {}, I: GetAllGeoDataRequest, O: GetAllGeoDataResponse },
    { name: "GetFiberInfo", options: {}, I: GetFiberInfoRequest, O: GetFiberInfoResponse },
    { name: "GetLandmarksModel", options: {}, I: GetLandmarksModelRequest, O: GetLandmarksModelResponse },
    { name: "CreateLandmarksModel", options: {}, I: CreateLandmarksModelRequest, O: CreateLandmarksModelResponse },
    { name: "UpdateLandmarksModel", options: {}, I: UpdateLandmarksModelRequest, O: UpdateLandmarksModelResponse },
    { name: "DeleteLandmarksModel", options: {}, I: DeleteLandmarksModelRequest, O: DeleteLandmarksModelResponse }
]);
