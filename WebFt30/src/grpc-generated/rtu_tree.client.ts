// @generated by protobuf-ts 2.9.4 with parameter long_type_string,optimize_code_size
// @generated from protobuf file "rtu_tree.proto" (package "fibertest30.rtu_tree", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { RtuTree } from "./rtu_tree";
import type { DetachAllTracesResponse } from "./rtu_tree";
import type { DetachAllTracesRequest } from "./rtu_tree";
import type { GetRtuCurrentStepResponse } from "./rtu_tree";
import type { GetRtuCurrentStepRequest } from "./rtu_tree";
import type { GetTraceLastMeasurementResponse } from "./rtu_tree";
import type { GetTraceLastMeasurementRequest } from "./rtu_tree";
import type { GetTraceStatisticsResponse } from "./rtu_tree";
import type { GetTraceStatisticsRequest } from "./rtu_tree";
import type { GetTraceBaselineStatResponse } from "./rtu_tree";
import type { GetTraceBaselineStatRequest } from "./rtu_tree";
import type { DetachOtauResponse } from "./rtu_tree";
import type { DetachOtauRequest } from "./rtu_tree";
import type { AttachOtauResponse } from "./rtu_tree";
import type { AttachOtauRequest } from "./rtu_tree";
import type { DetachTraceResponse } from "./rtu_tree";
import type { DetachTraceRequest } from "./rtu_tree";
import type { AttachTraceResponse } from "./rtu_tree";
import type { AttachTraceRequest } from "./rtu_tree";
import type { GetRtuResponse } from "./rtu_tree";
import type { GetRtuRequest } from "./rtu_tree";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { GetRtuTreeResponse } from "./rtu_tree";
import type { GetRtuTreeRequest } from "./rtu_tree";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service fibertest30.rtu_tree.RtuTree
 */
export interface IRtuTreeClient {
    /**
     * @generated from protobuf rpc: GetRtuTree(fibertest30.rtu_tree.GetRtuTreeRequest) returns (fibertest30.rtu_tree.GetRtuTreeResponse);
     */
    getRtuTree(input: GetRtuTreeRequest, options?: RpcOptions): UnaryCall<GetRtuTreeRequest, GetRtuTreeResponse>;
    /**
     * @generated from protobuf rpc: GetRtu(fibertest30.rtu_tree.GetRtuRequest) returns (fibertest30.rtu_tree.GetRtuResponse);
     */
    getRtu(input: GetRtuRequest, options?: RpcOptions): UnaryCall<GetRtuRequest, GetRtuResponse>;
    /**
     * @generated from protobuf rpc: AttachTrace(fibertest30.rtu_tree.AttachTraceRequest) returns (fibertest30.rtu_tree.AttachTraceResponse);
     */
    attachTrace(input: AttachTraceRequest, options?: RpcOptions): UnaryCall<AttachTraceRequest, AttachTraceResponse>;
    /**
     * @generated from protobuf rpc: DetachTrace(fibertest30.rtu_tree.DetachTraceRequest) returns (fibertest30.rtu_tree.DetachTraceResponse);
     */
    detachTrace(input: DetachTraceRequest, options?: RpcOptions): UnaryCall<DetachTraceRequest, DetachTraceResponse>;
    /**
     * @generated from protobuf rpc: AttachOtau(fibertest30.rtu_tree.AttachOtauRequest) returns (fibertest30.rtu_tree.AttachOtauResponse);
     */
    attachOtau(input: AttachOtauRequest, options?: RpcOptions): UnaryCall<AttachOtauRequest, AttachOtauResponse>;
    /**
     * @generated from protobuf rpc: DetachOtau(fibertest30.rtu_tree.DetachOtauRequest) returns (fibertest30.rtu_tree.DetachOtauResponse);
     */
    detachOtau(input: DetachOtauRequest, options?: RpcOptions): UnaryCall<DetachOtauRequest, DetachOtauResponse>;
    /**
     * @generated from protobuf rpc: GetTraceBaselineStat(fibertest30.rtu_tree.GetTraceBaselineStatRequest) returns (fibertest30.rtu_tree.GetTraceBaselineStatResponse);
     */
    getTraceBaselineStat(input: GetTraceBaselineStatRequest, options?: RpcOptions): UnaryCall<GetTraceBaselineStatRequest, GetTraceBaselineStatResponse>;
    /**
     * @generated from protobuf rpc: GetTraceStatistics(fibertest30.rtu_tree.GetTraceStatisticsRequest) returns (fibertest30.rtu_tree.GetTraceStatisticsResponse);
     */
    getTraceStatistics(input: GetTraceStatisticsRequest, options?: RpcOptions): UnaryCall<GetTraceStatisticsRequest, GetTraceStatisticsResponse>;
    /**
     * @generated from protobuf rpc: GetTraceLastMeasurement(fibertest30.rtu_tree.GetTraceLastMeasurementRequest) returns (fibertest30.rtu_tree.GetTraceLastMeasurementResponse);
     */
    getTraceLastMeasurement(input: GetTraceLastMeasurementRequest, options?: RpcOptions): UnaryCall<GetTraceLastMeasurementRequest, GetTraceLastMeasurementResponse>;
    /**
     * @generated from protobuf rpc: GetRtuCurrentStep(fibertest30.rtu_tree.GetRtuCurrentStepRequest) returns (fibertest30.rtu_tree.GetRtuCurrentStepResponse);
     */
    getRtuCurrentStep(input: GetRtuCurrentStepRequest, options?: RpcOptions): UnaryCall<GetRtuCurrentStepRequest, GetRtuCurrentStepResponse>;
    /**
     * @generated from protobuf rpc: DetachAllTraces(fibertest30.rtu_tree.DetachAllTracesRequest) returns (fibertest30.rtu_tree.DetachAllTracesResponse);
     */
    detachAllTraces(input: DetachAllTracesRequest, options?: RpcOptions): UnaryCall<DetachAllTracesRequest, DetachAllTracesResponse>;
}
/**
 * @generated from protobuf service fibertest30.rtu_tree.RtuTree
 */
export class RtuTreeClient implements IRtuTreeClient, ServiceInfo {
    typeName = RtuTree.typeName;
    methods = RtuTree.methods;
    options = RtuTree.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: GetRtuTree(fibertest30.rtu_tree.GetRtuTreeRequest) returns (fibertest30.rtu_tree.GetRtuTreeResponse);
     */
    getRtuTree(input: GetRtuTreeRequest, options?: RpcOptions): UnaryCall<GetRtuTreeRequest, GetRtuTreeResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetRtuTreeRequest, GetRtuTreeResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetRtu(fibertest30.rtu_tree.GetRtuRequest) returns (fibertest30.rtu_tree.GetRtuResponse);
     */
    getRtu(input: GetRtuRequest, options?: RpcOptions): UnaryCall<GetRtuRequest, GetRtuResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetRtuRequest, GetRtuResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: AttachTrace(fibertest30.rtu_tree.AttachTraceRequest) returns (fibertest30.rtu_tree.AttachTraceResponse);
     */
    attachTrace(input: AttachTraceRequest, options?: RpcOptions): UnaryCall<AttachTraceRequest, AttachTraceResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<AttachTraceRequest, AttachTraceResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DetachTrace(fibertest30.rtu_tree.DetachTraceRequest) returns (fibertest30.rtu_tree.DetachTraceResponse);
     */
    detachTrace(input: DetachTraceRequest, options?: RpcOptions): UnaryCall<DetachTraceRequest, DetachTraceResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<DetachTraceRequest, DetachTraceResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: AttachOtau(fibertest30.rtu_tree.AttachOtauRequest) returns (fibertest30.rtu_tree.AttachOtauResponse);
     */
    attachOtau(input: AttachOtauRequest, options?: RpcOptions): UnaryCall<AttachOtauRequest, AttachOtauResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<AttachOtauRequest, AttachOtauResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DetachOtau(fibertest30.rtu_tree.DetachOtauRequest) returns (fibertest30.rtu_tree.DetachOtauResponse);
     */
    detachOtau(input: DetachOtauRequest, options?: RpcOptions): UnaryCall<DetachOtauRequest, DetachOtauResponse> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<DetachOtauRequest, DetachOtauResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetTraceBaselineStat(fibertest30.rtu_tree.GetTraceBaselineStatRequest) returns (fibertest30.rtu_tree.GetTraceBaselineStatResponse);
     */
    getTraceBaselineStat(input: GetTraceBaselineStatRequest, options?: RpcOptions): UnaryCall<GetTraceBaselineStatRequest, GetTraceBaselineStatResponse> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetTraceBaselineStatRequest, GetTraceBaselineStatResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetTraceStatistics(fibertest30.rtu_tree.GetTraceStatisticsRequest) returns (fibertest30.rtu_tree.GetTraceStatisticsResponse);
     */
    getTraceStatistics(input: GetTraceStatisticsRequest, options?: RpcOptions): UnaryCall<GetTraceStatisticsRequest, GetTraceStatisticsResponse> {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetTraceStatisticsRequest, GetTraceStatisticsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetTraceLastMeasurement(fibertest30.rtu_tree.GetTraceLastMeasurementRequest) returns (fibertest30.rtu_tree.GetTraceLastMeasurementResponse);
     */
    getTraceLastMeasurement(input: GetTraceLastMeasurementRequest, options?: RpcOptions): UnaryCall<GetTraceLastMeasurementRequest, GetTraceLastMeasurementResponse> {
        const method = this.methods[8], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetTraceLastMeasurementRequest, GetTraceLastMeasurementResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetRtuCurrentStep(fibertest30.rtu_tree.GetRtuCurrentStepRequest) returns (fibertest30.rtu_tree.GetRtuCurrentStepResponse);
     */
    getRtuCurrentStep(input: GetRtuCurrentStepRequest, options?: RpcOptions): UnaryCall<GetRtuCurrentStepRequest, GetRtuCurrentStepResponse> {
        const method = this.methods[9], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetRtuCurrentStepRequest, GetRtuCurrentStepResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DetachAllTraces(fibertest30.rtu_tree.DetachAllTracesRequest) returns (fibertest30.rtu_tree.DetachAllTracesResponse);
     */
    detachAllTraces(input: DetachAllTracesRequest, options?: RpcOptions): UnaryCall<DetachAllTracesRequest, DetachAllTracesResponse> {
        const method = this.methods[10], opt = this._transport.mergeOptions(options);
        return stackIntercept<DetachAllTracesRequest, DetachAllTracesResponse>("unary", this._transport, method, opt, input);
    }
}
